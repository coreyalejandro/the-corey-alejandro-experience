This file is a merged representation of the entire codebase, combined into a single document by Repomix. The content has been processed where security check has been disabled.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.storybook/
  main.ts
  preview.ts
  vitest.setup.ts
design-engineer-portfolio/
  .next/
    server/
      app-paths-manifest.json
      interception-route-rewrite-manifest.js
      middleware-manifest.json
      pages-manifest.json
      server-reference-manifest.js
      server-reference-manifest.json
    types/
      cache-life.d.ts
      package.json
docs/
  claude-starship-control-panel.tsx
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    globals.css
    layout.tsx
    page.tsx
  services/
    openai.js
    supabase.js
  stories/
    assets/
      accessibility.svg
      discord.svg
      github.svg
      tutorials.svg
      youtube.svg
    button.css
    Button.stories.ts
    Button.tsx
    Configure.mdx
    header.css
    Header.stories.ts
    Header.tsx
    page.css
    Page.stories.ts
    Page.tsx
  utils/
    errorLogger.js
  App.jsx
talking-canvas-portfolio/
  ChatLogHistory.tsx
  DebugPanel.tsx
  ErrorBoundary.tsx
  index.tsx
  MicStatus.tsx
  ProjectCards.tsx
  ProjectDeepDive.tsx
  ProjectModal.tsx
  TalkingCanvasApp.tsx
  TalkingCanvasForm.tsx
.gitignore
cleanup.js
eslint.config.mjs
fix-issues.js
next.config.ts
package.json
postcss.config.mjs
README.md
tsconfig.json
vitest.config.ts

================================================================
Files
================================================================

================
File: .storybook/main.ts
================
import type { StorybookConfig } from "@storybook/experimental-nextjs-vite";

const config: StorybookConfig = {
  "stories": [
    "../src/**/*.mdx",
    "../src/**/*.stories.@(js|jsx|mjs|ts|tsx)"
  ],
  "addons": [
    "@storybook/addon-essentials",
    "@storybook/addon-onboarding",
    "@chromatic-com/storybook",
    "@storybook/experimental-addon-test"
  ],
  "framework": {
    "name": "@storybook/experimental-nextjs-vite",
    "options": {}
  },
  "staticDirs": [
    "../public"
  ]
};
export default config;

================
File: .storybook/preview.ts
================
import type { Preview } from '@storybook/react'

const preview: Preview = {
  parameters: {
    controls: {
      matchers: {
       color: /(background|color)$/i,
       date: /Date$/i,
      },
    },
  },
};

export default preview;

================
File: .storybook/vitest.setup.ts
================
import { beforeAll } from 'vitest';
import { setProjectAnnotations } from '@storybook/experimental-nextjs-vite';
import * as projectAnnotations from './preview';

// This is an important step to apply the right configuration when testing your stories.
// More info at: https://storybook.js.org/docs/api/portable-stories/portable-stories-vitest#setprojectannotations
const project = setProjectAnnotations([projectAnnotations]);

beforeAll(project.beforeAll);

================
File: design-engineer-portfolio/.next/server/app-paths-manifest.json
================
{}

================
File: design-engineer-portfolio/.next/server/interception-route-rewrite-manifest.js
================
self.__INTERCEPTION_ROUTE_REWRITE_MANIFEST="[]"

================
File: design-engineer-portfolio/.next/server/middleware-manifest.json
================
{
  "version": 3,
  "middleware": {},
  "functions": {},
  "sortedMiddleware": []
}

================
File: design-engineer-portfolio/.next/server/pages-manifest.json
================
{}

================
File: design-engineer-portfolio/.next/server/server-reference-manifest.js
================
self.__RSC_SERVER_MANIFEST="{\n  \"node\": {},\n  \"edge\": {},\n  \"encryptionKey\": \"process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY\"\n}"

================
File: design-engineer-portfolio/.next/server/server-reference-manifest.json
================
{
  "node": {},
  "edge": {},
  "encryptionKey": "gBEVDh5D2hYKPXtlVHr+ZEwb4xwL5C0nNYmCWSisS/M="
}

================
File: design-engineer-portfolio/.next/types/cache-life.d.ts
================
// Type definitions for Next.js cacheLife configs

declare module 'next/cache' {
  export { unstable_cache } from 'next/dist/server/web/spec-extension/unstable-cache'
  export {
    revalidateTag,
    revalidatePath,
    unstable_expireTag,
    unstable_expirePath,
  } from 'next/dist/server/web/spec-extension/revalidate'
  export { unstable_noStore } from 'next/dist/server/web/spec-extension/unstable-no-store'

  
    /**
     * Cache this `"use cache"` for a timespan defined by the `"default"` profile.
     * ```
     *   stale:      300 seconds (5 minutes)
     *   revalidate: 900 seconds (15 minutes)
     *   expire:     never
     * ```
     * 
     * This cache may be stale on clients for 5 minutes before checking with the server.
     * If the server receives a new request after 15 minutes, start revalidating new values in the background.
     * It lives for the maximum age of the server cache. If this entry has no traffic for a while, it may serve an old value the next request.
     */
    export function unstable_cacheLife(profile: "default"): void
    
    /**
     * Cache this `"use cache"` for a timespan defined by the `"seconds"` profile.
     * ```
     *   stale:      0 seconds
     *   revalidate: 1 seconds
     *   expire:     60 seconds (1 minute)
     * ```
     * 
     * This cache may be stale on clients for 0 seconds before checking with the server.
     * If the server receives a new request after 1 seconds, start revalidating new values in the background.
     * If this entry has no traffic for 1 minute it will expire. The next request will recompute it.
     */
    export function unstable_cacheLife(profile: "seconds"): void
    
    /**
     * Cache this `"use cache"` for a timespan defined by the `"minutes"` profile.
     * ```
     *   stale:      300 seconds (5 minutes)
     *   revalidate: 60 seconds (1 minute)
     *   expire:     3600 seconds (1 hour)
     * ```
     * 
     * This cache may be stale on clients for 5 minutes before checking with the server.
     * If the server receives a new request after 1 minute, start revalidating new values in the background.
     * If this entry has no traffic for 1 hour it will expire. The next request will recompute it.
     */
    export function unstable_cacheLife(profile: "minutes"): void
    
    /**
     * Cache this `"use cache"` for a timespan defined by the `"hours"` profile.
     * ```
     *   stale:      300 seconds (5 minutes)
     *   revalidate: 3600 seconds (1 hour)
     *   expire:     86400 seconds (1 day)
     * ```
     * 
     * This cache may be stale on clients for 5 minutes before checking with the server.
     * If the server receives a new request after 1 hour, start revalidating new values in the background.
     * If this entry has no traffic for 1 day it will expire. The next request will recompute it.
     */
    export function unstable_cacheLife(profile: "hours"): void
    
    /**
     * Cache this `"use cache"` for a timespan defined by the `"days"` profile.
     * ```
     *   stale:      300 seconds (5 minutes)
     *   revalidate: 86400 seconds (1 day)
     *   expire:     604800 seconds (1 week)
     * ```
     * 
     * This cache may be stale on clients for 5 minutes before checking with the server.
     * If the server receives a new request after 1 day, start revalidating new values in the background.
     * If this entry has no traffic for 1 week it will expire. The next request will recompute it.
     */
    export function unstable_cacheLife(profile: "days"): void
    
    /**
     * Cache this `"use cache"` for a timespan defined by the `"weeks"` profile.
     * ```
     *   stale:      300 seconds (5 minutes)
     *   revalidate: 604800 seconds (1 week)
     *   expire:     2592000 seconds (30 days)
     * ```
     * 
     * This cache may be stale on clients for 5 minutes before checking with the server.
     * If the server receives a new request after 1 week, start revalidating new values in the background.
     * If this entry has no traffic for 30 days it will expire. The next request will recompute it.
     */
    export function unstable_cacheLife(profile: "weeks"): void
    
    /**
     * Cache this `"use cache"` for a timespan defined by the `"max"` profile.
     * ```
     *   stale:      300 seconds (5 minutes)
     *   revalidate: 2592000 seconds (30 days)
     *   expire:     never
     * ```
     * 
     * This cache may be stale on clients for 5 minutes before checking with the server.
     * If the server receives a new request after 30 days, start revalidating new values in the background.
     * It lives for the maximum age of the server cache. If this entry has no traffic for a while, it may serve an old value the next request.
     */
    export function unstable_cacheLife(profile: "max"): void
    
    /**
     * Cache this `"use cache"` using a custom timespan.
     * ```
     *   stale: ... // seconds
     *   revalidate: ... // seconds
     *   expire: ... // seconds
     * ```
     *
     * This is similar to Cache-Control: max-age=`stale`,s-max-age=`revalidate`,stale-while-revalidate=`expire-revalidate`
     *
     * If a value is left out, the lowest of other cacheLife() calls or the default, is used instead.
     */
    export function unstable_cacheLife(profile: {
      /**
       * This cache may be stale on clients for ... seconds before checking with the server.
       */
      stale?: number,
      /**
       * If the server receives a new request after ... seconds, start revalidating new values in the background.
       */
      revalidate?: number,
      /**
       * If this entry has no traffic for ... seconds it will expire. The next request will recompute it.
       */
      expire?: number
    }): void
  

  export { cacheTag as unstable_cacheTag } from 'next/dist/server/use-cache/cache-tag'
}

================
File: design-engineer-portfolio/.next/types/package.json
================
{"type": "module"}

================
File: docs/claude-starship-control-panel.tsx
================
import React, { useState, useEffect, useRef } from 'react';
import * as THREE from 'three';

// ----- Types and Interfaces -----
type SystemStatus = 'active' | 'inactive' | 'warning' | 'error';
type SystemName = 'Propulsion' | 'Navigation' | 'Life Support' | 'Defense' | 'Communications' | 'Power';
type AlertLevel = 'info' | 'warning' | 'danger';
type DriveStatus = 'inactive' | 'active' | 'charging' | 'cooldown';
type ViewMode = 'SPACE' | 'TACTICAL' | 'SYSTEM' | 'DIAGNOSTIC';
type PowerSource = 'TOTAL' | 'QUANTUM' | 'FUSION' | 'BACKUP';

interface SystemStatusData {
  name: SystemName;
  percentage: number;
  status: SystemStatus;
}

interface AlertMessage {
  message: string;
  level: AlertLevel;
  timestamp: Date;
}

interface Target {
  id: string;
  distance: number;
  status: 'LOCKED' | 'TRACKING';
}

interface NavigationData {
  heading: number;
  speed: number;
  destination: string;
  eta: string;
}

interface PowerDetails {
  health: number;
  efficiency: number;
  powerDraw: number;
  outputHistory: number[];
}

interface PowerDistribution {
  sources: Record<PowerSource, number>;
  grid: boolean[][];
}

// Add these interfaces at the top with other interfaces
interface StatusBarProps {
  percentage: number;
  status: SystemStatus;
}

interface PanelHeaderProps {
  title: string;
}

interface PanelProps {
  children: React.ReactNode;
  className?: string;
}

interface AlertBannerProps {
  alert: {
    message: string;
    level: AlertLevel;
  };
}

interface ActionButtonProps {
  label: string;
  onClick: () => void;
  disabled?: boolean;
}

interface SimpleDataDisplayProps {
  label: string;
  value: string | number;
}

interface PowerOutputGraphProps {
  data: number[];
}

interface SystemMenuItemProps {
  name: string;
  isActive: boolean;
  onClick: () => void;
}

// Add these additional interfaces
interface GridProps {
  grid: boolean[][];
}

interface GridCellProps {
  active: boolean;
  index: number;
}

interface SectionHeaderProps {
  heading: string;
}

interface TargetProps {
  target: string;
}

interface LogEntryProps {
  message: string;
  timestamp: string;
}

interface SystemStatusProps {
  status: SystemStatus;
  integrity: number;
}

interface ModeSelectorProps {
  mode: string;
}

// Add these additional interfaces
interface CompassHeadingProps {
  heading: string;
}

interface TargetDisplayProps {
  target: Target;
}

interface PowerSourceProps {
  source: string;
  percentage: number;
}

interface SystemListProps {
  systems: System[];
}

interface LogListProps {
  logs: Array<{
    message: string;
    timestamp: Date;
  }>;
}

interface System {
  id: string;
  name: string;
  status: SystemStatus;
  integrity: number;
}

interface Navigation {
  heading: number;
  speed: number;
  target: string;
}

interface PowerSystem {
  id: string;
  name: string;
  status: SystemStatus;
  powerLevel: number;
}

interface SystemStatusPanelProps {
  systems: SystemStatusData[];
}

interface SystemMenuPanelProps {
  systems: SystemName[];
  activeSystem: SystemName;
  onSelectSystem: (system: SystemName) => void;
}

interface SystemDetailRowProps {
  label: string;
  value: string | number;
  status: 'nominal' | 'warning' | 'critical' | 'offline';
}

interface PowerDetailsPanelProps {
  details: PowerDetails;
}

interface KnowledgeBaseRAGPanelProps {
  onSearch: (query: string) => void;
  onVoiceCommand: (command: string) => void;
}

interface ActionButtonsPanelProps {
  onEngageWarp: () => void;
  onScanObject: () => void;
  onActivateShields: () => void;
  canEngageWarp: boolean;
}

interface Alert {
  message: string;
  level: 'critical' | 'warning' | 'info';
  timestamp: Date;
}

interface MainViewPanelProps {
  alerts: Alert[];
  planetPosition: {
    x: number;
    y: number;
  };
}

interface TacticalDisplayPanelProps {
  navigation: NavigationData;
  targets: Target[];
}

interface RadarObject {
  distance: number;
  angle: number;
  type: 'neutral' | 'hostile' | 'friendly' | 'anomaly';
  size?: number;
}

interface RadarDisplayProps {
  objects: RadarObject[];
}

interface CrewStatusProps {
  crewCount: number;
  crewHealth: number;
  awakePercentage: number;
}

interface Resource {
  amount: number;
  capacity: number;
}

interface ResourceDisplayProps {
  resources: Record<string, Resource>;
}

interface MaintenanceTask {
  name: string;
  eta: string;
  urgent: boolean;
}

interface MaintenanceStatusProps {
  tasks: MaintenanceTask[];
}

interface LifeSupportDetailsProps {
  oxygen: number;
  temperature: number;
  pressure: number;
}

interface Notification {
  title: string;
  message: string;
  level: 'critical' | 'warning';
}

interface NotificationOverlayProps {
  notifications: Notification[];
  onDismiss: () => void;
}

interface VoiceCommandPrompt {
  command: string;
  description: string;
}

// ----- Theme and Styling -----
const theme = {
  colors: {
    background: '#0a0a0a',
    panelBackground: 'rgba(20, 20, 20, 0.8)',
    border: 'rgba(255, 255, 255, 0.1)',
    textPrimary: '#ffffff',
    textSecondary: 'rgba(255, 255, 255, 0.7)',
    accent: '#00f5ff',
    accentSecondary: '#ff00f5',
    success: '#00ff9d',
    warning: '#ffb800',
    error: '#ff3d3d',
    glass: 'rgba(255, 255, 255, 0.05)',
    glassHover: 'rgba(255, 255, 255, 0.1)',
  },
  borders: {
    panel: '1px solid rgba(255, 255, 255, 0.1)',
    highlight: '1px solid rgba(255, 255, 255, 0.2)',
  },
  shadows: {
    glow: '0 0 20px rgba(0, 245, 255, 0.2)',
    panel: '0 4px 30px rgba(0, 0, 0, 0.1)',
  },
  transitions: {
    default: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
  },
  glassmorphism: {
    backdrop: 'backdrop-filter: blur(10px)',
    background: 'background: rgba(20, 20, 20, 0.8)',
  }
};

interface ExpertiseArea {
  id: string;
  name: string;
  description: string;
  skills: string[];
  projects: Array<{
    title: string;
    description: string;
    technologies: string[];
    demo?: string;
    github?: string;
  }>;
}

interface Education {
  degree: string;
  institution: string;
  year: string;
  certifications: Array<{
    name: string;
    issuer: string;
    date: string;
    credentialId?: string;
  }>;
}

const EXPERTISE_AREAS: ExpertiseArea[] = [
  {
    id: 'isd',
    name: 'Instructional Systems Design',
    description: 'Designing effective learning experiences and educational systems',
    skills: ['Learning Design', 'Curriculum Development', 'Educational Technology', 'Assessment Design'],
    projects: [
      {
        title: 'Adaptive Learning Platform',
        description: 'AI-powered learning management system with personalized content delivery',
        technologies: ['React', 'Node.js', 'MongoDB', 'TensorFlow'],
        demo: 'https://demo.adaptive-learning.com',
        github: 'https://github.com/username/adaptive-learning'
      }
    ]
  },
  {
    id: 'ai',
    name: 'Artificial Intelligence',
    description: 'Developing intelligent systems and AI solutions',
    skills: ['Neural Networks', 'Natural Language Processing', 'Computer Vision', 'Reinforcement Learning'],
    projects: [
      {
        title: 'AI-Powered Content Generator',
        description: 'Advanced content generation system using GPT and custom models',
        technologies: ['Python', 'TensorFlow', 'OpenAI API', 'FastAPI'],
        demo: 'https://demo.ai-content.com',
        github: 'https://github.com/username/ai-content'
      }
    ]
  },
  {
    id: 'data-science',
    name: 'Data Science',
    description: 'Analyzing complex data and deriving actionable insights',
    skills: ['Data Analysis', 'Statistical Modeling', 'Data Visualization', 'Big Data'],
    projects: [
      {
        title: 'Predictive Analytics Dashboard',
        description: 'Real-time data visualization and prediction platform',
        technologies: ['Python', 'Pandas', 'Scikit-learn', 'D3.js'],
        demo: 'https://demo.analytics.com',
        github: 'https://github.com/username/analytics'
      }
    ]
  },
  {
    id: 'ml',
    name: 'Machine Learning',
    description: 'Building and deploying machine learning models',
    skills: ['Model Development', 'Feature Engineering', 'Model Deployment', 'MLOps'],
    projects: [
      {
        title: 'ML Model Deployment Platform',
        description: 'End-to-end platform for ML model deployment and monitoring',
        technologies: ['Python', 'Docker', 'Kubernetes', 'Prometheus'],
        demo: 'https://demo.ml-platform.com',
        github: 'https://github.com/username/ml-platform'
      }
    ]
  },
  {
    id: 'fullstack',
    name: 'Full Stack Web Development',
    description: 'Building scalable web applications and systems',
    skills: ['Frontend Development', 'Backend Development', 'DevOps', 'Cloud Architecture'],
    projects: [
      {
        title: 'Cloud-Native Web Platform',
        description: 'Scalable web platform with microservices architecture',
        technologies: ['React', 'Node.js', 'AWS', 'Docker'],
        demo: 'https://demo.web-platform.com',
        github: 'https://github.com/username/web-platform'
      }
    ]
  }
];

const EDUCATION: Education = {
  degree: 'Master of Science in Computer Science',
  institution: 'University of Technology',
  year: '2022',
  certifications: [
    {
      name: 'AWS Certified Solutions Architect',
      issuer: 'Amazon Web Services',
      date: '2023',
      credentialId: 'AWS-123456'
    },
    {
      name: 'Google Cloud Professional Data Engineer',
      issuer: 'Google',
      date: '2023',
      credentialId: 'GCP-789012'
    }
  ]
};

const VOICE_COMMANDS: VoiceCommandPrompt[] = [
  // Navigation Commands
  { command: "show expertise", description: "Display all expertise areas" },
  { command: "show education", description: "Display education and certifications" },
  { command: "show projects", description: "Display all projects" },
  { command: "show skills", description: "Display all skills" },
  
  // Expertise Area Commands
  { command: "show instructional design", description: "Display Instructional Systems Design expertise" },
  { command: "show artificial intelligence", description: "Display AI expertise" },
  { command: "show data science", description: "Display Data Science expertise" },
  { command: "show machine learning", description: "Display Machine Learning expertise" },
  { command: "show full stack", description: "Display Full Stack Development expertise" },
  
  // Project Commands
  { command: "show projects in", description: "Show projects for a specific expertise area" },
  { command: "show skills in", description: "Show skills for a specific expertise area" },
  
  // Search Commands
  { command: "search for", description: "Search across all content" },
  { command: "search in", description: "Search within a specific expertise area" },
  
  // Help Commands
  { command: "help", description: "Show available voice commands" },
  { command: "stop listening", description: "Disable voice control" }
];

// ----- Utility Components -----

// Component 1: StatusBar - Shows a colored progress bar
const StatusBar = ({ percentage, status }: StatusBarProps) => {
  const getColor = () => {
    switch (status) {
      case 'error': return theme.colors.error;
      case 'warning': return theme.colors.warning;
      case 'inactive': return theme.colors.textSecondary;
      default: return theme.colors.success;
    }
  };

  return (
    <div className="flex items-center w-full">
      <div className="w-full bg-gray-800 rounded-sm h-2">
        <div 
          className="h-full rounded-sm" 
          style={{ 
            width: `${percentage}%`, 
            backgroundColor: getColor() 
          }} 
        />
      </div>
      <span className="ml-2 text-xs" style={{ color: theme.colors.textPrimary }}>
        {percentage}%
      </span>
    </div>
  );
};

// Component 2: PanelHeader - Consistent header for all panels
const PanelHeader = ({ title }: PanelHeaderProps) => (
  <div 
    className="w-full px-3 py-2 font-bold tracking-wide"
    style={{ color: theme.colors.textPrimary }}
  >
    {title}
  </div>
);

// Component 3: Panel - Base container for all panels
const Panel = ({ children, className = "" }: PanelProps) => (
  <div 
    className={`rounded overflow-hidden flex flex-col ${className}`}
    style={{ 
      border: theme.borders.panel,
      backgroundColor: theme.colors.panelBackground,
    }}
  >
    {children}
  </div>
);

// Component 4: AlertBanner - Shows alert messages
const AlertBanner = ({ alert }: AlertBannerProps) => {
  const getColor = () => {
    switch (alert.level) {
      case 'danger': return theme.colors.error;
      case 'warning': return theme.colors.warning;
      default: return theme.colors.accent;
    }
  };
  
  return (
    <div 
      className="w-full py-2 px-4 text-center my-1 rounded"
      style={{ 
        backgroundColor: getColor(),
        color: '#000000',
      }}
    >
      {alert.message}
    </div>
  );
};

// Component 5: ActionButton - Interactive button for ship controls
const ActionButton = ({ label, onClick, disabled = false }: ActionButtonProps) => (
  <button
    className="w-full py-3 px-4 my-1 text-center rounded transition-all duration-200"
    style={{
      backgroundColor: disabled ? theme.colors.glass : theme.colors.accent,
      color: disabled ? theme.colors.textSecondary : theme.colors.textPrimary,
      border: theme.borders.panel,
    }}
    onClick={onClick}
    disabled={disabled}
  >
    {label}
  </button>
);

// Component 6: SimpleDataDisplay - For displaying key-value pair data
const SimpleDataDisplay = ({ label, value }: SimpleDataDisplayProps) => (
  <div className="flex justify-between items-center mb-2">
    <span style={{ color: theme.colors.textSecondary }}>{label}:</span>
    <span style={{ color: theme.colors.textPrimary }}>{value}</span>
  </div>
);

// Component 7: PowerOutputGraph - Line graph for power output
const PowerOutputGraph = ({ data }: PowerOutputGraphProps) => {
  // Simple SVG line graph
  const height = 100;
  const width = 300;
  const maxValue = Math.max(...data, 100);
  
  const points = data.map((value, index) => 
    `${(index / (data.length - 1)) * width},${height - (value / maxValue) * height}`
  ).join(' ');
  
  return (
    <div className="bg-black bg-opacity-30 rounded p-1">
      <div className="text-xs mb-1" style={{ color: theme.colors.textSecondary }}>
        Power Output Levels
      </div>
      <svg width="100%" height={height} viewBox={`0 0 ${width} ${height}`} preserveAspectRatio="none">
        <polyline
          points={points}
          fill="none"
          stroke={theme.colors.accent}
          strokeWidth="2"
        />
      </svg>
    </div>
  );
};

// Component 8: SystemMenuItem - Menu item for system selection
const SystemMenuItem = ({ name, isActive, onClick }: SystemMenuItemProps) => (
  <div 
    className="py-2 px-4 cursor-pointer transition-all duration-200"
    style={{ 
      backgroundColor: isActive ? theme.colors.accent : 'transparent',
      color: isActive ? theme.colors.textPrimary : theme.colors.textSecondary,
      borderLeft: isActive ? `3px solid ${theme.colors.accent}` : '3px solid transparent',
    }}
    onClick={onClick}
  >
    {name}
  </div>
);

// Component 9: PowerGrid - Visual representation of power allocation
const PowerGrid = ({ grid }: GridProps) => (
  <div className="grid grid-cols-5 gap-1">
    {grid.flat().map((active, index) => (
      <GridCell 
        key={index}
        active={active}
        index={index}
      />
    ))}
  </div>
);

const GridCell = ({ active, index }: GridCellProps) => (
  <div
    className={`aspect-square rounded ${active ? 'bg-success' : 'bg-gray-800'} border ${active ? 'border-success' : 'border-gray-800'}`}
  />
);

// Component 10: CompassHeading - Shows direction on tactical display
const CompassHeading = ({ heading }: CompassHeadingProps) => {
  const directions = ['N', 'E', 'S', 'W'];
  const rotation = heading;
  
  return (
    <div className="relative">
      <div className="w-40 h-40 rounded-full border-2 border-gray-600 flex items-center justify-center relative">
        <div className="absolute inset-0 flex items-center justify-center">
          <div style={{ transform: `rotate(${-rotation}deg)` }}>
            {directions.map((dir, idx) => (
              <div
                key={dir}
                className="absolute text-sm font-bold"
                style={{ 
                  transform: `rotate(${idx * 90}deg) translateY(-42px)`,
                  color: theme.colors.textPrimary,
                }}
              >
                {dir}
              </div>
            ))}
          </div>
        </div>
        
        {/* Heading indicator */}
        <div 
          className="w-1 h-16 bg-blue-400 absolute top-0 left-1/2 transform -translate-x-1/2 origin-bottom"
          style={{ transform: `translateY(4px) rotate(${heading}deg)` }}
        />
      </div>
    </div>
  );
};

// Component 11: Target - Visual indicator of tracked object
const TargetIndicator = ({ target }: TargetDisplayProps) => (
  <div className="mb-2">
    <div className="flex items-center">
      <div 
        className="w-6 h-6 mr-2 flex items-center justify-center"
        style={{ 
          border: `1px solid ${target.status === 'LOCKED' ? theme.colors.error : theme.colors.warning}`,
          color: target.status === 'LOCKED' ? theme.colors.error : theme.colors.warning,
        }}
      >
        <span>+</span>
      </div>
      <div>
        <div style={{ color: target.status === 'LOCKED' ? theme.colors.error : theme.colors.warning }}>
          {target.id}: {target.distance}m
        </div>
        <div className="text-xs" style={{ color: target.status === 'LOCKED' ? theme.colors.error : theme.colors.warning }}>
          {target.status}
        </div>
      </div>
    </div>
  </div>
);

// Component 12: ShipLogEntry - For displaying ship log entries
const ShipLogEntry = ({ message, timestamp }: LogEntryProps) => (
  <div className="py-1 border-b border-gray-800">
    <div className="text-xs" style={{ color: theme.colors.textSecondary }}>
      {timestamp}
    </div>
    <div style={{ color: theme.colors.textPrimary }}>{message}</div>
  </div>
);

// Component 13: DriveStatus - Shows the current drive status
const DriveStatus = ({ status, integrity }: SystemStatusProps) => (
  <div className="text-center py-3">
    <div className="text-xl uppercase tracking-widest mb-1" style={{ color: theme.colors.accent }}>
      {status === 'active' ? 'Drive Active' : 'Drive Inactive'}
    </div>
    <div className="text-sm" style={{ color: theme.colors.textSecondary }}>
      Integrity: {integrity}%
    </div>
  </div>
);

// Component 14: ViewModeIndicator - Shows current view mode
const ViewModeIndicator = ({ mode }: ModeSelectorProps) => (
  <div className="text-center py-2">
    <div className="text-sm tracking-widest" style={{ color: theme.colors.accent }}>
      VIEW MODE: {mode}
    </div>
  </div>
);

// Component 15: PowerSourceBar - Bar showing power allocation for a source
const PowerSourceBar = ({ source, percentage }: PowerSourceProps) => (
  <div className="mb-2">
    <div className="flex justify-between mb-1">
      <span style={{ color: theme.colors.textSecondary }}>{source}</span>
      <span style={{ color: theme.colors.textPrimary }}>{percentage}%</span>
    </div>
    <div className="w-full bg-gray-800 rounded-sm h-2">
      <div 
        className="h-full rounded-sm" 
        style={{ 
          width: `${percentage}%`, 
          backgroundColor: source === 'TOTAL' ? theme.colors.warning : theme.colors.success 
        }} 
      />
    </div>
  </div>
);

// Component 16: SystemStatusPanel - Left top panel showing system statuses
const SystemStatusPanel = ({ systems }) => (
  <Panel>
    <PanelHeader title="SYSTEM STATUS" />
    <div className="p-4 flex-1">
      {systems.map(system => (
        <div key={system.name} className="mb-3">
          <div className="flex justify-between mb-1">
            <span style={{ color: theme.colors.textSecondary }}>{system.name}</span>
          </div>
          <StatusBar percentage={system.percentage} status={system.status} />
        </div>
      ))}
    </div>
  </Panel>
);

// Component 17: ShipLogPanel - Shows log of ship events
const ShipLogPanel = ({ logs }: LogListProps) => (
  <Panel>
    <PanelHeader title="SHIP LOG" />
    <div className="p-4 flex-1 overflow-y-auto max-h-40">
      {logs.map((log, index) => (
        <ShipLogEntry key={index} message={log.message} timestamp={log.timestamp.toLocaleTimeString()} />
      ))}
    </div>
  </Panel>
);

// Component 18: SystemMenuPanel - Left menu for selecting systems
const SystemMenuPanel = ({ systems, activeSystem, onSelectSystem }: SystemMenuPanelProps) => (
  <Panel>
    {systems.map(system => (
      <SystemMenuItem 
        key={system}
        name={system}
        isActive={activeSystem === system}
        onClick={() => onSelectSystem(system)}
      />
    ))}
  </Panel>
);

// Component 19: PowerDetailsPanel - Shows detailed power information
const PowerDetailsPanel = ({ details }: PowerDetailsPanelProps) => (
  <Panel>
    <PanelHeader title="POWER DETAILS" />
    <div className="p-4 flex-1">
      <SimpleDataDisplay label="Health" value={`${details.health}%`} />
      <SimpleDataDisplay label="Efficiency" value={`${details.efficiency}%`} />
      <SimpleDataDisplay label="Power Draw" value={`${details.powerDraw}%`} />
      
      <div className="mt-4">
        <PowerOutputGraph data={details.outputHistory} />
      </div>
    </div>
  </Panel>
);

// Component 20: KnowledgeBaseRAGPanel - Intelligent information retrieval system
const KnowledgeBaseRAGPanel = ({ onSearch, onVoiceCommand }: KnowledgeBaseRAGPanelProps) => {
  const [isListening, setIsListening] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<Array<{
    title: string;
    content: string;
    relevance: number;
  }>>([]);
  const recognitionRef = useRef<SpeechRecognition | null>(null);

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      if (SpeechRecognition) {
        recognitionRef.current = new SpeechRecognition();
        recognitionRef.current.continuous = true;
        recognitionRef.current.interimResults = true;
        recognitionRef.current.onresult = (event: SpeechRecognitionEvent) => {
          const transcript = event.results[event.results.length - 1][0].transcript;
          onVoiceCommand(transcript);
        };
      }
    }
  }, [onVoiceCommand]);

  const toggleVoiceRecognition = () => {
    if (!recognitionRef.current) return;
    
    if (isListening) {
      recognitionRef.current.stop();
    } else {
      recognitionRef.current.start();
    }
    setIsListening(!isListening);
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    onSearch(searchQuery);
  };

  return (
    <Panel>
      <PanelHeader title="KNOWLEDGE BASE RAG" />
      <div className="p-4 flex-1">
        <form onSubmit={handleSearch} className="flex gap-2 mb-4">
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="Search knowledge base..."
            className="flex-1 bg-[#1a1a1a] text-white px-3 py-2 rounded border border-[#333] focus:outline-none focus:border-[#00ff00]"
          />
          <button
            type="submit"
            className="px-4 py-2 bg-[#00ff00] text-black rounded hover:bg-[#00cc00] transition-colors"
          >
            Search
          </button>
        </form>

        <button
          onClick={toggleVoiceRecognition}
          className={`w-full px-4 py-2 rounded mb-4 transition-colors ${
            isListening
              ? 'bg-red-500 hover:bg-red-600'
              : 'bg-[#00ff00] hover:bg-[#00cc00]'
          } text-black`}
        >
          {isListening ? 'Stop Voice Recognition' : 'Start Voice Recognition'}
        </button>

        <div className="space-y-4">
          {searchResults.map((result, index) => (
            <div
              key={index}
              className="bg-[#1a1a1a] p-4 rounded border border-[#333]"
            >
              <h3 className="text-[#00ff00] font-bold mb-2">{result.title}</h3>
              <p className="text-white mb-2">{result.content}</p>
              <div className="text-sm text-gray-400">
                Relevance: {Math.round(result.relevance * 100)}%
              </div>
            </div>
          ))}
        </div>
      </div>
    </Panel>
  );
};

// Component 21: ActionButtonsPanel - Right side action buttons
const ActionButtonsPanel = ({
  onEngageWarp,
  onScanObject,
  onActivateShields,
  canEngageWarp,
}: ActionButtonsPanelProps) => (
  <Panel>
    <PanelHeader title="ACTION BUTTONS" />
    <div className="p-4 flex-1 flex flex-col gap-4">
      <button
        onClick={onEngageWarp}
        disabled={!canEngageWarp}
        className={`px-4 py-2 rounded ${
          canEngageWarp
            ? 'bg-[#00ff00] hover:bg-[#00cc00]'
            : 'bg-gray-500 cursor-not-allowed'
        } text-black transition-colors`}
      >
        Engage Warp Drive
      </button>
      <button
        onClick={onScanObject}
        className="px-4 py-2 bg-[#00ff00] hover:bg-[#00cc00] text-black rounded transition-colors"
      >
        Scan Object
      </button>
      <button
        onClick={onActivateShields}
        className="px-4 py-2 bg-[#00ff00] hover:bg-[#00cc00] text-black rounded transition-colors"
      >
        Activate Shields
      </button>
    </div>
  </Panel>
);

// Component 22: MainViewPanel - Central view screen
const MainViewPanel = ({ alerts, planetPosition }: MainViewPanelProps) => (
  <Panel>
    <PanelHeader title="MAIN VIEW" />
    <div className="p-4 flex-1">
      <div className="relative w-full h-full">
        <div
          className="absolute w-4 h-4 bg-[#00ff00] rounded-full"
          style={{
            left: `${planetPosition.x}%`,
            top: `${planetPosition.y}%`,
          }}
        />
      </div>
      <div className="mt-4 space-y-2">
        {alerts.map((alert, index) => (
          <div
            key={index}
            className={`p-2 rounded ${
              alert.level === 'critical'
                ? 'bg-red-500'
                : alert.level === 'warning'
                ? 'bg-yellow-500'
                : 'bg-blue-500'
            } text-white`}
          >
            {alert.message}
          </div>
        ))}
      </div>
    </div>
  </Panel>
);

// Component 23: TacticalDisplayPanel - Bottom central tactical info
const TacticalDisplayPanel = ({ navigation, targets }: TacticalDisplayPanelProps) => (
  <Panel>
    <PanelHeader title="TACTICAL DISPLAY" />
    <div className="p-4 flex-1">
      <div className="space-y-4">
        <div className="flex justify-between">
          <span className="text-[#00ff00]">Heading:</span>
          <span className="text-white">{navigation.heading}°</span>
        </div>
        <div className="flex justify-between">
          <span className="text-[#00ff00]">Speed:</span>
          <span className="text-white">{navigation.speed} km/s</span>
        </div>
        <div className="flex justify-between">
          <span className="text-[#00ff00]">Destination:</span>
          <span className="text-white">{navigation.destination}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-[#00ff00]">ETA:</span>
          <span className="text-white">{navigation.eta}</span>
        </div>
      </div>
      <div className="mt-4">
        <h3 className="text-[#00ff00] mb-2">Active Targets:</h3>
        <div className="space-y-2">
          {targets.map((target, index) => (
            <TargetIndicator key={index} target={target} />
          ))}
        </div>
      </div>
    </div>
  </Panel>
);

// Component 24: DriveStatusPanel - Bottom status bar
const DriveStatusPanel = ({ status, integrity }: SystemStatusProps) => (
  <Panel>
    <DriveStatus status={status} integrity={integrity} />
  </Panel>
);

// Component 25: PlanetaryBody - Visualizes a planet in space view
const PlanetaryBody = ({ size, color, hasRings = false, position }) => (
  <div 
    className="absolute rounded-full"
    style={{ 
      width: `${size}px`,
      height: `${size}px`,
      backgroundColor: color,
      boxShadow: `0 0 ${size/2}px rgba(139, 233, 253, 0.3)`,
      transform: `translate(${position.x}px, ${position.y}px)`,
      top: '50%',
      left: '50%',
      marginLeft: `-${size/2}px`,
      marginTop: `-${size/2}px`,
    }}
  >
    {hasRings && (
      <div 
        className="absolute rounded-full border-2"
        style={{
          width: `${size * 1.4}px`,
          height: `${size * 0.3}px`,
          borderColor: 'rgba(255,255,255,0.4)',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%) rotateX(70deg)',
        }}
      />
    )}
  </div>
);

// Component 26: AlertIndicator - Small indicator for system alerts
const AlertIndicator = ({ system, isActive }) => (
  <div 
    className="w-2 h-2 rounded-full ml-2"
    style={{ 
      backgroundColor: isActive ? theme.colors.error : 'transparent',
      display: isActive ? 'block' : 'none',
    }}
  />
);

// Component 27: SystemDetailRow - Row for detailed system info
const SystemDetailRow = ({ label, value, status = 'nominal' }: SystemDetailRowProps) => {
  const getStatusColor = () => {
    switch (status) {
      case 'critical': return theme.colors.error;
      case 'warning': return theme.colors.warning;
      case 'offline': return theme.colors.textSecondary;
      default: return theme.colors.success;
    }
  };

  return (
    <div className="flex justify-between items-center mb-2 py-1 border-b border-gray-800">
      <span style={{ color: theme.colors.textSecondary }}>{label}</span>
      <span style={{ color: getStatusColor() }}>{value}</span>
    </div>
  );
};

// Component 28: PowerControlSlider - Slider for adjusting power
const PowerControlSlider = ({ system, value, onChange }) => (
  <div className="mb-4">
    <div className="flex justify-between mb-1">
      <span style={{ color: theme.colors.textSecondary }}>{system}</span>
      <span style={{ color: theme.colors.textPrimary }}>{value}%</span>
    </div>
    <input
      type="range"
      min="0"
      max="100"
      value={value}
      onChange={(e) => onChange(parseInt(e.target.value))}
      className="w-full"
      style={{
        // Custom slider styling
        accentColor: theme.colors.success,
      }}
    />
  </div>
);

// Component 29: SystemDetailsPanel - Shows detailed info for selected system
const SystemDetailsPanel = ({ system, details, powerAllocation, onPowerChange }) => (
  <Panel>
    <PanelHeader title={`${system} DETAILS`} />
    <div className="p-4">
      {Object.entries(details).map(([key, value]) => (
        <SystemDetailRow key={key} label={key} value={value} />
      ))}
      
      <div className="mt-4">
        <PowerControlSlider 
          system={system} 
          value={powerAllocation} 
          onChange={onPowerChange} 
        />
      </div>
    </div>
  </Panel>
);

// Component 30: ImpulsePowerIndicator - Shows impulse power levels
const ImpulsePowerIndicator = ({ powerLevels }) => {
  const max = Math.max(...powerLevels);
  
  return (
    <Panel>
      <PanelHeader title="IMPULSE POWER" />
      <div className="p-2 h-40">
        <div className="h-full flex items-end">
          {powerLevels.map((level, index) => (
            <div 
              key={index}
              className="w-2 mx-1 rounded-t"
              style={{ 
                height: `${(level / max) * 100}%`,
                backgroundColor: level > 0.05 ? theme.colors.accent : theme.colors.textSecondary,
              }}
            />
          ))}
        </div>
      </div>
    </Panel>
  );
};

// Component 31: useMockData - Custom hook for generating mock data
const useMockData = () => {
  const [systemStatuses, setSystemStatuses] = useState([
    { name: 'Propulsion', percentage: 92, status: 'nominal' },
    { name: 'Navigation', percentage: 93, status: 'nominal' },
    { name: 'Life Support', percentage: 94, status: 'nominal' },
    { name: 'Defense', percentage: 78, status: 'warning' },
    { name: 'Communications', percentage: 86, status: 'warning' },
    { name: 'Power', percentage: 92, status: 'nominal' },
  ]);
  
  const [alerts, setAlerts] = useState([
    { 
      message: 'Defense fluctuation detected', 
      level: 'warning',
      timestamp: new Date() 
    },
    { 
      message: 'Minor Communications calibration needed', 
      level: 'warning',
      timestamp: new Date() 
    },
    { 
      message: 'DROPPING TO IMPULSE', 
      level: 'info',
      timestamp: new Date() 
    },
  ]);
  
  const [logs, setLogs] = useState([
    { message: 'Systems initialized', timestamp: new Date(Date.now() - 60000 * 10) },
    { message: 'Warp drive online', timestamp: new Date(Date.now() - 60000 * 8) },
    { message: 'Encryption key updated', timestamp: new Date(Date.now() - 60000 * 6) },
    { message: 'Course set to Alpha Centauri', timestamp: new Date(Date.now() - 60000 * 4) },
    { message: 'Data received from starbase', timestamp: new Date(Date.now() - 60000 * 2) },
  ]);
  
  const [navigation, setNavigation] = useState({
    heading: 128,
    pitch: -7,
    roll: 7,
    altitude: 9671,
    velocity: 14008,
  });
  
  const [targets, setTargets] = useState([
    { id: 'TGT-1', distance: 185, status: 'LOCKED' },
    { id: 'TGT-2', distance: 892, status: 'TRACKING' },
    { id: 'TGT-3', distance: 113, status: 'TRACKING' },
  ]);
  
  const [powerDetails, setPowerDetails] = useState({
    health: 92,
    efficiency: 77,
    powerDraw: 62,
    outputHistory: Array(30).fill(0).map(() => Math.random() * 30 + 70),
  });
  
  const [powerDistribution, setPowerDistribution] = useState({
    sources: {
      'TOTAL': 75,
      'QUANTUM': 82,
      'FUSION': 80,
      'BACKUP': 10,
    },
    grid: [
      [true, true, true, true, true],
      [true, true, true, true, true],
      [true, true, true, false, false],
      [true, true, false, false, false],
    ],
  });
  
  const [driveStatus, setDriveStatus] = useState({
    status: 'active',
    integrity: 100,
  });
  
  const [impulsePowerLevels, setImpulsePowerLevels] = useState(
    Array(15).fill(0).map((_, i) => 0.1 - (i * 0.01))
  );
  
  const [planetPosition, setPlanetPosition] = useState({ x: 0, y: 0 });
  const [activeSystem, setActiveSystem] = useState('Propulsion');
  
  // Update planet position periodically
  useEffect(() => {
    const interval = setInterval(() => {
      setPlanetPosition({
        x: Math.sin(Date.now() / 10000) * 20,
        y: Math.cos(Date.now() / 10000) * 10,
      });
    }, 100);
    
    return () => clearInterval(interval);
  }, []);
  
  // Add periodic log entries
  useEffect(() => {
    const interval = setInterval(() => {
      setLogs(prev => [
        { message: `System scan complete - ${new Date().toLocaleTimeString()}`, timestamp: new Date() },
        ...prev.slice(0, 9) // Keep only last 10 entries
      ]);
    }, 30000);
    
    return () => clearInterval(interval);
  }, []);
  
  // Update power levels
  useEffect(() => {
    const interval = setInterval(() => {
      setPowerDetails(prev => ({
        ...prev,
        outputHistory: [
          ...prev.outputHistory.slice(1),
          Math.random() * 30 + 70
        ]
      }));
    }, 2000);
    
    return () => clearInterval(interval);
  }, []);
  
  // Simulate random system fluctuations
  useEffect(() => {
    const interval = setInterval(() => {
      setSystemStatuses(prev => 
        prev.map(system => ({
          ...system,
          percentage: Math.min(100, Math.max(50, 
            system.percentage + (Math.random() < 0.7 ? 0 : Math.random() < 0.5 ? -1 : 1)
          ))
        }))
      );
    }, 5000);
    
    return () => clearInterval(interval);
  }, []);
  
  // Return all the state and update functions
  return {
    systemStatuses,
    alerts,
    logs,
    navigation,
    targets,
    powerDetails,
    powerDistribution,
    driveStatus,
    impulsePowerLevels,
    planetPosition,
    activeSystem,
    setActiveSystem,
    
    // Additional action functions
    engageWarpDrive: () => {
      setAlerts(prev => [
        { message: 'INITIATING WARP SEQUENCE', level: 'info', timestamp: new Date() },
        ...prev
      ]);
      setLogs(prev => [
        { message: 'Warp drive engaged', timestamp: new Date() },
        ...prev
      ]);
    },
    
    scanObject: () => {
      setAlerts(prev => [
        { message: 'SCANNING NEAREST OBJECT', level: 'info', timestamp: new Date() },
        ...prev
      ]);
      setLogs(prev => [
        { message: 'Scan initiated', timestamp: new Date() },
        ...prev
      ]);
      
      // Add a new target after scan
      setTimeout(() => {
        const newTarget = { 
          id: `TGT-${Math.floor(Math.random() * 900) + 100}`, 
          distance: Math.floor(Math.random() * 1000) + 100,
          status: 'TRACKING'
        };
        
        setTargets(prev => [newTarget, ...prev]);
        
        setLogs(prev => [
          { message: `New object detected: ${newTarget.id}`, timestamp: new Date() },
          ...prev
        ]);
      }, 2000);
    },
    
    activateShields: () => {
      setAlerts(prev => [
        { message: 'SHIELDS ACTIVATED', level: 'info', timestamp: new Date() },
        ...prev
      ]);
      setLogs(prev => [
        { message: 'Shield generators online', timestamp: new Date() },
        ...prev
      ]);
      
      // Update defense status
      setSystemStatuses(prev => prev.map(system => 
        system.name === 'Defense' 
          ? { ...system, percentage: Math.min(100, system.percentage + 10), status: 'nominal' } 
          : system
      ));
    },
  };
};

// Component 32: SystemIcon - Displays an icon for each system type
const SystemIcon = ({ systemName }) => {
  const getIcon = () => {
    switch (systemName) {
      case 'Propulsion': return '🚀';
      case 'Navigation': return '🧭';
      case 'Life Support': return '🫁';
      case 'Defense': return '🛡️';
      case 'Communications': return '📡';
      case 'Power': return '⚡';
      default: return '🔧';
    }
  };
  
  return (
    <div className="w-6 h-6 flex items-center justify-center mr-2" style={{ color: theme.colors.textPrimary }}>
      {getIcon()}
    </div>
  );
};

// Component 33: SystemStatsLabel - Displays a key stat for a system
const SystemStatsLabel = ({ systemName, value, unit = '%' }) => {
  const getKey = () => {
    switch (systemName) {
      case 'Propulsion': return 'Thrust';
      case 'Navigation': return 'Accuracy';
      case 'Life Support': return 'Oxygen';
      case 'Defense': return 'Strength';
      case 'Communications': return 'Signal';
      case 'Power': return 'Output';
      default: return 'Status';
    }
  };
  
  return (
    <div className="text-xs" style={{ color: theme.colors.textSecondary }}>
      {getKey()}: {value}{unit}
    </div>
  );
};

// Component 34: SystemIconWithStatus - Combined icon and status indicator
const SystemIconWithStatus = ({ system }) => (
  <div className="flex items-center">
    <SystemIcon systemName={system.name} />
    <div>
      <div style={{ color: theme.colors.textPrimary }}>{system.name}</div>
      <SystemStatsLabel systemName={system.name} value={system.percentage} />
    </div>
    <AlertIndicator system={system.name} isActive={system.status === 'warning' || system.status === 'critical'} />
  </div>
);

// Component 35: TimeDisplay - Shows current stardate/time
const TimeDisplay = () => {
  const [time, setTime] = useState(new Date());
  
  useEffect(() => {
    const interval = setInterval(() => setTime(new Date()), 1000);
    return () => clearInterval(interval);
  }, []);
  
  // Create a fictional stardate
  const stardate = `${time.getFullYear() - 1900}.${(time.getMonth() + 1) * 100 + time.getDate()}`;
  
  return (
    <div className="text-right pr-3 py-1" style={{ color: theme.colors.textSecondary }}>
      <div>STARDATE {stardate}</div>
      <div>{time.toLocaleTimeString()}</div>
    </div>
  );
};

// Component 36: NavCoordinates - Shows ship coordinates
const NavCoordinates = () => {
  // Generate random "space coordinates"
  const coordinates = {
    x: (Math.random() * 200 - 100).toFixed(3),
    y: (Math.random() * 200 - 100).toFixed(3),
    z: (Math.random() * 200 - 100).toFixed(3),
    sector: `${String.fromCharCode(65 + Math.floor(Math.random() * 26))}-${Math.floor(Math.random() * 100)}`
  };
  
  return (
    <div className="p-3" style={{ color: theme.colors.textSecondary }}>
      <div className="text-xs mb-1">COORDINATES</div>
      <div className="grid grid-cols-2 gap-x-6 gap-y-1 text-sm">
        <div>X: {coordinates.x}</div>
        <div>Y: {coordinates.y}</div>
        <div>Z: {coordinates.z}</div>
        <div>SECTOR: {coordinates.sector}</div>
      </div>
    </div>
  );
};

// Component 37: NotificationBadge - Shows number of notifications
const NotificationBadge = ({ count }) => (
  count > 0 ? (
    <div 
      className="w-5 h-5 rounded-full flex items-center justify-center text-xs"
      style={{ 
        backgroundColor: theme.colors.error,
        color: 'white',
      }}
    >
      {count}
    </div>
  ) : null
);

// Component 38: PowerFlowDiagram - Visualizes power flow between systems
const PowerFlowDiagram = () => {
  return (
    <div className="p-3">
      <div className="text-xs mb-2" style={{ color: theme.colors.textSecondary }}>
        POWER FLOW DIAGRAM
      </div>
      <svg width="100%" height="150" viewBox="0 0 300 150">
        {/* Core power node */}
        <circle cx="150" cy="75" r="20" fill="#2a4a6a" stroke={theme.colors.success} strokeWidth="2" />
        <text x="150" y="80" textAnchor="middle" fill={theme.colors.textPrimary} fontSize="12">CORE</text>
        
        {/* System nodes */}
        <circle cx="50" cy="40" r="15" fill="#1a3a5a" stroke={theme.colors.success} strokeWidth="1" />
        <text x="50" y="45" textAnchor="middle" fill={theme.colors.textPrimary} fontSize="10">NAV</text>
        
        <circle cx="50" cy="110" r="15" fill="#1a3a5a" stroke={theme.colors.success} strokeWidth="1" />
        <text x="50" y="115" textAnchor="middle" fill={theme.colors.textPrimary} fontSize="10">LIFE</text>
        
        <circle cx="250" cy="40" r="15" fill="#1a3a5a" stroke={theme.colors.success} strokeWidth="1" />
        <text x="250" y="45" textAnchor="middle" fill={theme.colors.textPrimary} fontSize="10">DEF</text>
        
        <circle cx="250" cy="110" r="15" fill="#1a3a5a" stroke={theme.colors.success} strokeWidth="1" />
        <text x="250" y="115" textAnchor="middle" fill={theme.colors.textPrimary} fontSize="10">COM</text>
        
        <circle cx="150" cy="25" r="15" fill="#1a3a5a" stroke={theme.colors.warning} strokeWidth="1" />
        <text x="150" y="30" textAnchor="middle" fill={theme.colors.textPrimary} fontSize="10">PROP</text>
        
        {/* Connection lines */}
        <line x1="132" y1="65" x2="60" y2="48" stroke={theme.colors.success} strokeWidth="2" />
        <line x1="132" y1="85" x2="60" y2="102" stroke={theme.colors.success} strokeWidth="2" />
        <line x1="168" y1="65" x2="240" y2="48" stroke={theme.colors.success} strokeWidth="2" />
        <line x1="168" y1="85" x2="240" y2="102" stroke={theme.colors.success} strokeWidth="2" />
        <line x1="150" y1="55" x2="150" y2="40" stroke={theme.colors.warning} strokeWidth="3" />
        
        {/* Power flow indicators */}
        <circle cx="90" cy="55" r="3" fill={theme.colors.success}>
          <animate attributeName="cx" from="132" to="60" dur="3s" repeatCount="indefinite" />
          <animate attributeName="cy" from="65" to="48" dur="3s" repeatCount="indefinite" />
        </circle>
        
        <circle cx="90" cy="95" r="3" fill={theme.colors.success}>
          <animate attributeName="cx" from="132" to="60" dur="4s" repeatCount="indefinite" />
          <animate attributeName="cy" from="85" to="102" dur="4s" repeatCount="indefinite" />
        </circle>
        
        <circle cx="210" cy="55" r="3" fill={theme.colors.success}>
          <animate attributeName="cx" from="168" to="240" dur="3.5s" repeatCount="indefinite" />
          <animate attributeName="cy" from="65" to="48" dur="3.5s" repeatCount="indefinite" />
        </circle>
        
        <circle cx="210" cy="95" r="3" fill={theme.colors.success}>
          <animate attributeName="cx" from="168" to="240" dur="4.5s" repeatCount="indefinite" />
          <animate attributeName="cy" from="85" to="102" dur="4.5s" repeatCount="indefinite" />
        </circle>
        
        <circle cx="150" cy="45" r="3" fill={theme.colors.warning}>
          <animate attributeName="cy" from="55" to="40" dur="2s" repeatCount="indefinite" />
        </circle>
      </svg>
    </div>
  );
};

// Component 39: ShipStatusSummary - Quick overview of ship status
const ShipStatusSummary = ({ 
  integrity, 
  fuelLevel, 
  alertCount, 
  warpStatus 
}) => (
  <div className="p-3 border-t border-gray-800">
    <div className="flex justify-between items-center mb-2">
      <span style={{ color: theme.colors.textSecondary }}>INTEGRITY:</span>
      <span style={{ color: theme.colors.success }}>{integrity}%</span>
    </div>
    <div className="flex justify-between items-center mb-2">
      <span style={{ color: theme.colors.textSecondary }}>FUEL:</span>
      <span style={{ color: theme.colors.warning }}>{fuelLevel}%</span>
    </div>
    <div className="flex justify-between items-center mb-2">
      <span style={{ color: theme.colors.textSecondary }}>ALERTS:</span>
      <div className="flex items-center">
        <span style={{ color: alertCount > 0 ? theme.colors.error : theme.colors.success }}>
          {alertCount}
        </span>
        <NotificationBadge count={alertCount} />
      </div>
    </div>
    <div className="flex justify-between items-center">
      <span style={{ color: theme.colors.textSecondary }}>WARP:</span>
      <span style={{ color: warpStatus === 'READY' ? theme.colors.success : theme.colors.textSecondary }}>
        {warpStatus}
      </span>
    </div>
  </div>
);

// Component 40: NavigationTarget - Shows current destination
const NavigationTarget = ({ destination, eta }) => (
  <div className="p-3 border-t border-gray-800">
    <div className="text-xs mb-1" style={{ color: theme.colors.textSecondary }}>
      CURRENT DESTINATION
    </div>
    <div style={{ color: theme.colors.textPrimary }}>
      {destination}
    </div>
    <div className="text-xs" style={{ color: theme.colors.warning }}>
      ETA: {eta}
    </div>
  </div>
);

// Component: 41 RadarBlip - Individual blip on radar
const RadarBlip = ({ distance, angle, size = 4, type = 'neutral' }) => {
  const getColor = () => {
    switch (type) {
      case 'hostile': return theme.colors.error;
      case 'friendly': return theme.colors.success;
      case 'anomaly': return theme.colors.warning;
      default: return theme.colors.accent;
    }
  };
  
  // Convert polar to cartesian coordinates
  const radius = 100; // radar radius
  const x = 100 + (distance / 100) * radius * Math.cos(angle * Math.PI / 180);
  const y = 100 + (distance / 100) * radius * Math.sin(angle * Math.PI / 180);
  
  return (
    <circle 
      cx={x} 
      cy={y} 
      r={size} 
      fill={getColor()} 
    >
      {/* Pulsating animation for blips */}
      <animate 
        attributeName="opacity" 
        values="1;0.3;1" 
        dur="2s" 
        repeatCount="indefinite" 
      />
    </circle>
  );
};

// Component 42: RadarDisplay - Shows nearby objects
const RadarDisplay = ({ objects }: RadarDisplayProps) => (
  <Panel>
    <PanelHeader title="RADAR DISPLAY" />
    <div className="p-4 flex-1">
      <div className="relative w-full h-full">
        {objects.map((object, index) => (
          <RadarBlip
            key={index}
            distance={object.distance}
            angle={object.angle}
            type={object.type}
            size={object.size}
          />
        ))}
      </div>
    </div>
  </Panel>
);

// Component 43: SensorReadings - Shows environmental readings
const SensorReadings = () => {
  // Generate random sensor data
  const sensorData = {
    temperature: (Math.random() * 100 - 50).toFixed(1),
    radiation: (Math.random() * 10).toFixed(2),
    gravity: (Math.random() * 2).toFixed(2),
    pressure: (Math.random() * 3 + 0.1).toFixed(2),
  };
  
  return (
    <div className="p-3 border-t border-gray-800">
      <div className="text-xs mb-1" style={{ color: theme.colors.textSecondary }}>
        EXTERNAL SENSORS
      </div>
      <div className="grid grid-cols-2 gap-x-4 gap-y-2 text-sm">
        <div className="flex justify-between">
          <span style={{ color: theme.colors.textSecondary }}>TEMP:</span>
          <span style={{ color: theme.colors.textPrimary }}>{sensorData.temperature}°C</span>
        </div>
        <div className="flex justify-between">
          <span style={{ color: theme.colors.textSecondary }}>RAD:</span>
          <span style={{ color: theme.colors.textPrimary }}>{sensorData.radiation} mSv</span>
        </div>
        <div className="flex justify-between">
          <span style={{ color: theme.colors.textSecondary }}>GRAV:</span>
          <span style={{ color: theme.colors.textPrimary }}>{sensorData.gravity} G</span>
        </div>
        <div className="flex justify-between">
          <span style={{ color: theme.colors.textSecondary }}>PRES:</span>
          <span style={{ color: theme.colors.textPrimary }}>{sensorData.pressure} atm</span>
        </div>
      </div>
    </div>
  );
};

// Component 44: CrewStatus - Shows crew status
const CrewStatus = ({ crewCount, crewHealth, awakePercentage }: CrewStatusProps) => (
  <Panel>
    <PanelHeader title="CREW STATUS" />
    <div className="p-4 flex-1">
      <div className="space-y-4">
        <div className="flex justify-between">
          <span className="text-[#00ff00]">Crew Count:</span>
          <span className="text-white">{crewCount}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-[#00ff00]">Crew Health:</span>
          <span className="text-white">{crewHealth}%</span>
        </div>
        <div className="flex justify-between">
          <span className="text-[#00ff00]">Awake Percentage:</span>
          <span className="text-white">{awakePercentage}%</span>
        </div>
      </div>
    </div>
  </Panel>
);

// Component 45: ResourceDisplay - Shows ship resources
const ResourceDisplay = ({ resources }: ResourceDisplayProps) => (
  <Panel>
    <PanelHeader title="RESOURCE DISPLAY" />
    <div className="p-4 flex-1">
      <div className="space-y-4">
        {Object.entries(resources).map(([name, resource]) => (
          <div key={name} className="flex justify-between">
            <span className="text-[#00ff00]">{name}:</span>
            <span className="text-white">
              {resource.amount}/{resource.capacity}
            </span>
          </div>
        ))}
      </div>
    </div>
  </Panel>
);

// Component 46: MaintenanceStatus - Shows maintenance tasks
const MaintenanceStatus = ({ tasks }: MaintenanceStatusProps) => (
  <Panel>
    <PanelHeader title="MAINTENANCE STATUS" />
    <div className="p-4 flex-1">
      <div className="space-y-4">
        {tasks.map((task, index) => (
          <div
            key={index}
            className={`p-2 rounded ${
              task.urgent ? 'bg-red-500' : 'bg-[#1a1a1a]'
            } text-white`}
          >
            <div className="flex justify-between">
              <span>{task.name}</span>
              <span>{task.eta}</span>
            </div>
          </div>
        ))}
      </div>
    </div>
  </Panel>
);

// Component 47: LifeSupportDetails - Shows life support status
const LifeSupportDetails = ({ oxygen, temperature, pressure }: LifeSupportDetailsProps) => (
  <Panel>
    <PanelHeader title="LIFE SUPPORT DETAILS" />
    <div className="p-4 flex-1">
      <div className="space-y-4">
        <div className="flex justify-between">
          <span className="text-[#00ff00]">Oxygen Level:</span>
          <span className="text-white">{oxygen}%</span>
        </div>
        <div className="flex justify-between">
          <span className="text-[#00ff00]">Temperature:</span>
          <span className="text-white">{temperature}°C</span>
        </div>
        <div className="flex justify-between">
          <span className="text-[#00ff00]">Pressure:</span>
          <span className="text-white">{pressure} kPa</span>
        </div>
      </div>
    </div>
  </Panel>
);

// Component 48: StarfieldBackground - Animated starfield background
const StarfieldBackground = ({ starCount = 100 }) => {
  // Generate random stars
  const stars = Array(starCount).fill(0).map((_, i) => ({
    x: Math.random() * 100,
    y: Math.random() * 100,
    size: Math.random() * 2 + 1,
    opacity: Math.random() * 0.5 + 0.5,
    speed: Math.random() * 3 + 1,
  }));
  
  return (
    <div className="absolute inset-0 overflow-hidden" style={{ zIndex: -1 }}>
      {stars.map((star, i) => (
        <div
          key={i}
          className="absolute rounded-full"
          style={{
            left: `${star.x}%`,
            top: `${star.y}%`,
            width: `${star.size}px`,
            height: `${star.size}px`,
            backgroundColor: 'white',
            opacity: star.opacity,
            boxShadow: `0 0 ${star.size}px white`,
            animation: `twinkle ${star.speed}s infinite alternate`
          }}
        />
      ))}
      <style jsx>{`
        @keyframes twinkle {
          0% { opacity: ${stars[0].opacity}; }
          100% { opacity: 0.2; }
        }
      `}</style>
    </div>
  );
};

// Component 49: NotificationOverlay - Shows important notifications
const NotificationOverlay = ({ notifications, onDismiss }: NotificationOverlayProps) => (
  <div className="fixed top-4 right-4 space-y-4 z-50">
    {notifications.map((notification, index) => (
      <div
        key={index}
        className={`p-4 rounded shadow-lg ${
          notification.level === 'critical'
            ? 'bg-red-500'
            : 'bg-yellow-500'
        } text-white`}
      >
        <div className="flex justify-between items-start">
          <div>
            <h3 className="font-bold">{notification.title}</h3>
            <p>{notification.message}</p>
          </div>
          <button
            onClick={onDismiss}
            className="ml-4 text-white hover:text-gray-200"
          >
            ×
          </button>
        </div>
      </div>
    ))}
  </div>
);

// Component 50: ThreeJSBackground - 3D animated background using Three.js
const ThreeJSBackground = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const sceneRef = useRef<THREE.Scene | null>(null);
  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);
  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);
  const particlesRef = useRef<THREE.Points | null>(null);
  const frameRef = useRef<number>(0);

  useEffect(() => {
    if (!canvasRef.current) return;

    // Scene setup
    const scene = new THREE.Scene();
    sceneRef.current = scene;

    // Camera setup
    const camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.z = 5;
    cameraRef.current = camera;

    // Renderer setup
    const renderer = new THREE.WebGLRenderer({
      canvas: canvasRef.current,
      alpha: true,
      antialias: true,
    });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    rendererRef.current = renderer;

    // Create particles
    const particlesGeometry = new THREE.BufferGeometry();
    const particlesCount = 5000;
    const posArray = new Float32Array(particlesCount * 3);

    for (let i = 0; i < particlesCount * 3; i++) {
      posArray[i] = (Math.random() - 0.5) * 5;
    }

    particlesGeometry.setAttribute(
      'position',
      new THREE.BufferAttribute(posArray, 3)
    );

    const particlesMaterial = new THREE.PointsMaterial({
      size: 0.005,
      color: theme.colors.accent,
      transparent: true,
      opacity: 0.8,
    });

    const particles = new THREE.Points(particlesGeometry, particlesMaterial);
    scene.add(particles);
    particlesRef.current = particles;

    // Animation
    const animate = () => {
      frameRef.current = requestAnimationFrame(animate);

      if (particlesRef.current) {
        particlesRef.current.rotation.y += 0.0001;
        particlesRef.current.rotation.x += 0.0001;
      }

      renderer.render(scene, camera);
    };

    animate();

    // Handle window resize
    const handleResize = () => {
      if (!cameraRef.current || !rendererRef.current) return;

      cameraRef.current.aspect = window.innerWidth / window.innerHeight;
      cameraRef.current.updateProjectionMatrix();
      rendererRef.current.setSize(window.innerWidth, window.innerHeight);
    };

    window.addEventListener('resize', handleResize);

    // Cleanup
    return () => {
      window.removeEventListener('resize', handleResize);
      cancelAnimationFrame(frameRef.current);
      scene.remove(particles);
      renderer.dispose();
    };
  }, []);

  return (
    <canvas
      ref={canvasRef}
      className="fixed inset-0 w-full h-full"
      style={{ zIndex: -1 }}
    />
  );
};

// Component 51: InteractivePortfolioView - Main 3D portfolio interface
const InteractivePortfolioView = () => {
  const [activeSection, setActiveSection] = useState('industries-and-experiences');
  const [activeExpertise, setActiveExpertise] = useState<string | null>(null);
  const [isVoiceEnabled, setIsVoiceEnabled] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [voiceStatus, setVoiceStatus] = useState<'idle' | 'listening' | 'processing'>('idle');
  const [lastCommand, setLastCommand] = useState<string | null>(null);
  const [showVoiceHelp, setShowVoiceHelp] = useState(false);
  const recognitionRef = useRef<SpeechRecognition | null>(null);

  // Mock portfolio data
  const portfolioData = {
    projects: [
      {
        id: 'project-1',
        title: 'Neural Interface Design',
        description: 'Advanced brain-computer interface with real-time feedback',
        technologies: ['React', 'Three.js', 'TensorFlow'],
        image: '/projects/neural-interface.jpg',
        demo: 'https://demo.neural-interface.com',
        github: 'https://github.com/username/neural-interface'
      },
      {
        id: 'project-2',
        title: 'Quantum Visualization',
        description: 'Interactive 3D visualization of quantum computing concepts',
        technologies: ['React', 'Three.js', 'WebGL'],
        image: '/projects/quantum-viz.jpg',
        demo: 'https://demo.quantum-viz.com',
        github: 'https://github.com/username/quantum-viz'
      }
    ],
    skills: [
      { name: 'UI/UX Design', level: 95 },
      { name: '3D Modeling', level: 90 },
      { name: 'Frontend Development', level: 85 },
      { name: 'AI/ML', level: 80 }
    ],
    experience: [
      {
        company: 'Tech Innovations Inc.',
        role: 'Senior Design Engineer',
        period: '2020-2023',
        description: 'Led design team in creating next-gen interfaces'
      }
    ]
  };

  // Voice control setup
  useEffect(() => {
    if (isVoiceEnabled) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      if (SpeechRecognition) {
        recognitionRef.current = new SpeechRecognition();
        recognitionRef.current.continuous = true;
        recognitionRef.current.interimResults = true;
        
        recognitionRef.current.onstart = () => {
          setVoiceStatus('listening');
          showVoicePrompt();
        };
        
        recognitionRef.current.onresult = (event) => {
          const command = event.results[event.results.length - 1][0].transcript.toLowerCase();
          setLastCommand(command);
          setVoiceStatus('processing');
          handleVoiceCommand(command);
        };
        
        recognitionRef.current.onend = () => {
          setVoiceStatus('idle');
        };
        
        recognitionRef.current.onerror = (event) => {
          console.error('Speech recognition error:', event.error);
          setVoiceStatus('idle');
        };
        
        recognitionRef.current.start();
        return () => {
          recognitionRef.current?.stop();
        };
      }
    }
  }, [isVoiceEnabled]);

  const showVoicePrompt = () => {
    const prompt = document.createElement('div');
    prompt.className = 'fixed bottom-4 right-4 p-4 rounded-lg shadow-lg z-50';
    prompt.style.backgroundColor = theme.colors.panelBackground;
    prompt.style.border = theme.borders.panel;
    prompt.innerHTML = `
      <div class="flex items-center space-x-2">
        <div class="w-3 h-3 rounded-full bg-red-500 animate-pulse"></div>
        <span style="color: ${theme.colors.textPrimary}">Listening...</span>
      </div>
      <div class="mt-2 text-sm" style="color: ${theme.colors.textSecondary}">
        Try saying "help" for available commands
      </div>
    `;
    document.body.appendChild(prompt);
    setTimeout(() => prompt.remove(), 3000);
  };

  const handleVoiceCommand = (command: string) => {
    if (command.includes('help')) {
      setShowVoiceHelp(true);
      return;
    }
    
    if (command.includes('stop listening')) {
      setIsVoiceEnabled(false);
      return;
    }
    
    // Navigation commands
    if (command.includes('show expertise')) {
      setActiveSection('industries-and-experiences');
      setActiveExpertise(null); // Reset active expertise when showing main expertise page
    }
    if (command.includes('show education')) {
      setActiveSection('education-and-certifications');
      setActiveExpertise(null);
    }
    if (command.includes('show projects')) {
      setActiveSection('featured-projects');
      setActiveExpertise(null);
    }
    if (command.includes('show skills')) {
      setActiveSection('cross-functional-skills');
      setActiveExpertise(null);
    }
    
    // Expertise area commands
    if (command.includes('show instructional design')) {
      setActiveSection('industries-and-experiences');
      setActiveExpertise('isd');
    }
    if (command.includes('show artificial intelligence')) {
      setActiveSection('industries-and-experiences');
      setActiveExpertise('ai');
    }
    if (command.includes('show data science')) {
      setActiveSection('industries-and-experiences');
      setActiveExpertise('data-science');
    }
    if (command.includes('show machine learning')) {
      setActiveSection('industries-and-experiences');
      setActiveExpertise('ml');
    }
    if (command.includes('show full stack')) {
      setActiveSection('industries-and-experiences');
      setActiveExpertise('fullstack');
    }
    
    // Project and skill commands
    if (command.includes('show projects in')) {
      const area = command.split('show projects in')[1].trim();
      const expertise = EXPERTISE_AREAS.find(e => 
        e.name.toLowerCase().includes(area.toLowerCase())
      );
      if (expertise) {
        setActiveSection('featured-projects');
        setActiveExpertise(expertise.id);
      }
    }
    
    if (command.includes('show skills in')) {
      const area = command.split('show skills in')[1].trim();
      const expertise = EXPERTISE_AREAS.find(e => 
        e.name.toLowerCase().includes(area.toLowerCase())
      );
      if (expertise) {
        setActiveSection('cross-functional-skills');
        setActiveExpertise(expertise.id);
      }
    }
    
    // Search commands
    if (command.includes('search for')) {
      const query = command.split('search for')[1].trim();
      setSearchQuery(query);
      performSearch(query);
    }
    
    if (command.includes('search in')) {
      const [_, area, query] = command.split('search in');
      const expertise = EXPERTISE_AREAS.find(e => 
        e.name.toLowerCase().includes(area.toLowerCase())
      );
      if (expertise) {
        setActiveExpertise(expertise.id);
        performSearch(query.trim(), expertise.id);
      }
    }
  };

  const performSearch = async (query, expertiseId?) => {
    setIsSearching(true);
    // Simulate AI-powered search
    const results = await new Promise(resolve => 
      setTimeout(() => {
        resolve(EXPERTISE_AREAS.find(e => e.id === expertiseId)?.projects.filter(project => 
          project.title.toLowerCase().includes(query.toLowerCase()) ||
          project.description.toLowerCase().includes(query.toLowerCase())
        ) || portfolioData.projects.filter(project => 
          project.title.toLowerCase().includes(query.toLowerCase()) ||
          project.description.toLowerCase().includes(query.toLowerCase())
        ));
      }, 500)
    );
    setSearchResults(results);
    setIsSearching(false);
  };

  return (
    <div className="relative h-screen w-full overflow-hidden">
      {/* 3D Background */}
      <ThreeJSBackground />

      {/* Main Content */}
      <div className="relative z-10 h-full flex">
        {/* Sidebar Navigation */}
        <div className="w-64 p-4" style={{ 
          backgroundColor: theme.colors.panelBackground,
          backdropFilter: 'blur(10px)',
          borderRight: theme.borders.panel
        }}>
          <div className="mb-8">
            <h1 className="text-2xl font-bold" style={{ color: theme.colors.textPrimary }}>
              Design Engineer
            </h1>
            <p className="text-sm" style={{ color: theme.colors.textSecondary }}>
              Creating the future of human-computer interaction
            </p>
          </div>

          <nav className="space-y-2">
            {[
              'industries-and-experiences',
              'education-and-certifications',
              'cross-functional-skills',
              'featured-projects',
              'resume',
              'contact',
              'about'
            ].map(section => (
              <button
                key={section}
                className={`w-full text-left px-4 py-2 rounded transition-all ${
                  activeSection === section 
                    ? 'shadow-inner bg-opacity-20' 
                    : 'hover:bg-white hover:bg-opacity-5'
                }`}
                style={{ 
                  color: theme.colors.textPrimary,
                  backgroundColor: activeSection === section 
                    ? theme.colors.glass
                    : 'transparent',
                  border: activeSection === section 
                    ? `1px solid ${theme.colors.accent}`
                    : 'none',
                  transform: activeSection === section ? 'translateY(1px)' : 'none'
                }}
                onClick={() => {
                  setActiveSection(section);
                  setActiveExpertise(null); // Reset active expertise when switching tabs
                }}
              >
                {section === 'education-and-certifications' ? 'Education and Certifications' :
                 section === 'industries-and-experiences' ? 'Industries and Experiences' :
                 section === 'cross-functional-skills' ? 'Cross-functional Skills' :
                 section === 'featured-projects' ? 'Featured Projects' :
                 section === 'resume' ? 'Resume' :
                 section === 'contact' ? 'Contact' :
                 'About'}
              </button>
            ))}
          </nav>

          <div className="mt-8">
            <button
              className={`w-full px-4 py-2 rounded flex items-center justify-center space-x-2 ${
                isVoiceEnabled ? 'bg-white bg-opacity-10' : ''
              }`}
              style={{ color: theme.colors.textPrimary }}
              onClick={() => setIsVoiceEnabled(!isVoiceEnabled)}
            >
              <span>🎤</span>
              <span>{isVoiceEnabled ? 'Voice Control Active' : 'Enable Voice Control'}</span>
            </button>
          </div>
        </div>

        {/* Main Content Area */}
        <div className="flex-1 p-8">
          {/* Voice Status Indicator */}
          {isVoiceEnabled && (
            <div className="fixed top-4 right-4 px-3 py-1.5 rounded-full shadow-lg z-50 flex items-center space-x-2"
              style={{ 
                backgroundColor: 'rgba(0, 0, 0, 0.75)',
                backdropFilter: 'blur(10px)',
                border: '1px solid rgba(255, 255, 255, 0.1)'
              }}>
              <div className={`w-2 h-2 rounded-full ${
                voiceStatus === 'listening' ? 'bg-red-500 animate-pulse' :
                voiceStatus === 'processing' ? 'bg-yellow-500' :
                'bg-green-500'
              }`} />
              <span className="text-xs" style={{ color: theme.colors.textPrimary }}>
                {voiceStatus === 'listening' ? 'Listening' :
                 voiceStatus === 'processing' ? 'Processing' :
                 'Voice Active'}
              </span>
            </div>
          )}

          {/* Breadcrumbs */}
          <Breadcrumbs 
            activeSection={activeSection} 
            activeExpertise={activeExpertise}
            setActiveExpertise={setActiveExpertise}
          />

          {/* Page Title */}
          <div className="mb-8">
            <h1 className="text-2xl font-bold tracking-wide" style={{ color: theme.colors.textPrimary }}>
              {activeSection === 'education-and-certifications' ? 'Education and Certifications' :
               activeSection === 'industries-and-experiences' ? 'Industries and Experiences' :
               activeSection === 'cross-functional-skills' ? 'Cross-functional Skills' :
               activeSection === 'featured-projects' ? 'Featured Projects' :
               activeSection === 'resume' ? 'Resume' :
               activeSection === 'contact' ? 'Contact' :
               'About'}
            </h1>
            <p className="text-sm" style={{ color: theme.colors.textSecondary }}>
              {activeSection === 'industries-and-experiences' ? 'Professional expertise and work experience' :
               activeSection === 'education-and-certifications' ? 'Academic background and professional certifications' :
               activeSection === 'cross-functional-skills' ? 'Technical and soft skills across disciplines' :
               activeSection === 'featured-projects' ? 'Highlighted projects and achievements' :
               activeSection === 'resume' ? 'Complete professional history' :
               activeSection === 'contact' ? 'Get in touch' :
               'About me and my journey'}
            </p>
          </div>

          {/* Content Display */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {activeSection === 'industries-and-experiences' && (
              activeExpertise ? (
                // Show specific expertise area
                EXPERTISE_AREAS.find(e => e.id === activeExpertise) && (
                  <div className="col-span-full">
                    {/* Page Title */}
                    <div className="mb-8">
                      <h1 className="text-2xl font-bold tracking-wide" style={{ color: theme.colors.textPrimary }}>
                        {EXPERTISE_AREAS.find(e => e.id === activeExpertise)?.name}
                      </h1>
                      <p className="text-sm" style={{ color: theme.colors.textSecondary }}>
                        {EXPERTISE_AREAS.find(e => e.id === activeExpertise)?.description}
                      </p>
                    </div>

                    <div className="flex items-center justify-between mb-8">
                      <button
                        onClick={() => setActiveExpertise(null)}
                        className="px-3 py-1 rounded flex items-center"
                        style={{ 
                          backgroundColor: theme.colors.glass,
                          border: theme.borders.panel,
                          color: theme.colors.textPrimary
                        }}
                      >
                        <span className="mr-2">←</span>
                        Back
                      </button>
                      <div className="flex gap-2">
                        <button
                          onClick={() => {
                            const currentIndex = EXPERTISE_AREAS.findIndex(e => e.id === activeExpertise);
                            const prevIndex = currentIndex === 0 ? EXPERTISE_AREAS.length - 1 : currentIndex - 1;
                            setActiveExpertise(EXPERTISE_AREAS[prevIndex].id);
                          }}
                          className="px-3 py-1 rounded flex items-center"
                          style={{ 
                            backgroundColor: theme.colors.glass,
                            border: theme.borders.panel,
                            color: theme.colors.textPrimary
                          }}
                        >
                          <span className="mr-2">←</span>
                          Previous
                        </button>
                        <button
                          onClick={() => {
                            const currentIndex = EXPERTISE_AREAS.findIndex(e => e.id === activeExpertise);
                            const nextIndex = currentIndex === EXPERTISE_AREAS.length - 1 ? 0 : currentIndex + 1;
                            setActiveExpertise(EXPERTISE_AREAS[nextIndex].id);
                          }}
                          className="px-3 py-1 rounded flex items-center"
                          style={{ 
                            backgroundColor: theme.colors.glass,
                            border: theme.borders.panel,
                            color: theme.colors.textPrimary
                          }}
                        >
                          Next
                          <span className="ml-2">→</span>
                        </button>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {/* Skills */}
                      <div>
                        <h3 className="text-xl font-bold mb-4" style={{ color: theme.colors.textPrimary }}>
                          Skills
                        </h3>
                        <div className="space-y-2">
                          {EXPERTISE_AREAS.find(e => e.id === activeExpertise)?.skills.map(skill => (
                            <div
                              key={skill}
                              className="p-3 rounded-lg"
                              style={{ 
                                backgroundColor: theme.colors.panelBackground,
                                border: theme.borders.panel
                              }}
                            >
                              <span style={{ color: theme.colors.textPrimary }}>{skill}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                      
                      {/* Projects */}
                      <div>
                        <h3 className="text-xl font-bold mb-4" style={{ color: theme.colors.textPrimary }}>
                          Projects
                        </h3>
                        <div className="space-y-4">
                          {EXPERTISE_AREAS.find(e => e.id === activeExpertise)?.projects.map(project => (
                            <div
                              key={project.title}
                              className="p-4 rounded-lg"
                              style={{ 
                                backgroundColor: theme.colors.panelBackground,
                                border: theme.borders.panel
                              }}
                            >
                              <h4 className="text-lg font-bold mb-2" style={{ color: theme.colors.textPrimary }}>
                                {project.title}
                              </h4>
                              <p className="text-sm mb-4" style={{ color: theme.colors.textSecondary }}>
                                {project.description}
                              </p>
                              <div className="flex flex-wrap gap-2">
                                {project.technologies.map(tech => (
                                  <span
                                    key={tech}
                                    className="px-2 py-1 rounded text-xs"
                                    style={{ 
                                      backgroundColor: theme.colors.glass,
                                      color: theme.colors.textPrimary
                                    }}
                                  >
                                    {tech}
                                  </span>
                                ))}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                )
              ) : (
                // Show all expertise areas
                EXPERTISE_AREAS.map(area => (
                  <div
                    key={area.id}
                    className="p-6 rounded-lg cursor-pointer transition-all hover:scale-105"
                    style={{ 
                      backgroundColor: theme.colors.panelBackground,
                      border: theme.borders.panel
                    }}
                    onClick={() => setActiveExpertise(area.id)}
                  >
                    <h3 className="text-xl font-bold mb-2" style={{ color: theme.colors.textPrimary }}>
                      {area.name}
                    </h3>
                    <p className="text-sm mb-4" style={{ color: theme.colors.textSecondary }}>
                      {area.description}
                    </p>
                    <div className="flex flex-wrap gap-2">
                      {area.skills.slice(0, 3).map(skill => (
                        <span
                          key={skill}
                          className="px-2 py-1 rounded text-xs"
                          style={{ 
                            backgroundColor: theme.colors.glass,
                            color: theme.colors.textPrimary
                          }}
                        >
                          {skill}
                        </span>
                      ))}
                    </div>
                  </div>
                ))
              )
            )}

            {activeSection === 'education-and-certifications' && (
              <div className="col-span-full">
                <h2 className="text-2xl font-bold tracking-wide mb-8" style={{ color: theme.colors.textPrimary }}>
                  Education and Certifications
                </h2>
                
                <div className="mb-8">
                  <h3 className="text-xl font-bold mb-2" style={{ color: theme.colors.textPrimary }}>
                    {EDUCATION.degree}
                  </h3>
                  <p className="text-lg mb-1" style={{ color: theme.colors.accent }}>
                    {EDUCATION.institution}
                  </p>
                  <p style={{ color: theme.colors.textSecondary }}>
                    {EDUCATION.year}
                  </p>
                </div>
                
                <h3 className="text-xl font-bold mb-4" style={{ color: theme.colors.textPrimary }}>
                  Certifications
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {EDUCATION.certifications.map(cert => (
                    <div
                      key={cert.name}
                      className="p-4 rounded-lg"
                      style={{ 
                        backgroundColor: theme.colors.panelBackground,
                        border: theme.borders.panel
                      }}
                    >
                      <h4 className="text-lg font-bold mb-1" style={{ color: theme.colors.textPrimary }}>
                        {cert.name}
                      </h4>
                      <p className="text-sm mb-1" style={{ color: theme.colors.accent }}>
                        {cert.issuer}
                      </p>
                      <p className="text-sm" style={{ color: theme.colors.textSecondary }}>
                        {cert.date}
                        {cert.credentialId && ` • ID: ${cert.credentialId}`}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {activeSection === 'featured-projects' && (
              <>
                <div className="col-span-full mb-8">
                  <h2 className="text-2xl font-bold tracking-wide" style={{ color: theme.colors.textPrimary }}>
                    Projects
                  </h2>
                </div>
                {portfolioData.projects.map(project => (
                  <div
                    key={project.id}
                    className="group relative overflow-hidden rounded-lg"
                    style={{ 
                      backgroundColor: theme.colors.panelBackground,
                      backdropFilter: 'blur(10px)',
                      border: theme.borders.panel
                    }}
                  >
                    <div className="aspect-w-16 aspect-h-9">
                      <img
                        src={project.image}
                        alt={project.title}
                        className="object-cover w-full h-full"
                      />
                    </div>
                    <div className="p-4">
                      <h3 className="text-lg font-bold mb-2" style={{ color: theme.colors.textPrimary }}>
                        {project.title}
                      </h3>
                      <p className="text-sm mb-4" style={{ color: theme.colors.textSecondary }}>
                        {project.description}
                      </p>
                      <div className="flex flex-wrap gap-2 mb-4">
                        {project.technologies.map(tech => (
                          <span
                            key={tech}
                            className="px-2 py-1 rounded text-xs"
                            style={{ 
                              backgroundColor: theme.colors.glass,
                              color: theme.colors.textPrimary
                            }}
                          >
                            {tech}
                          </span>
                        ))}
                      </div>
                      <div className="flex space-x-4">
                        <a
                          href={project.demo}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-sm hover:underline"
                          style={{ color: theme.colors.accent }}
                        >
                          Live Demo
                        </a>
                        <a
                          href={project.github}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-sm hover:underline"
                          style={{ color: theme.colors.accent }}
                        >
                          GitHub
                        </a>
                      </div>
                    </div>
                  </div>
                ))}
              </>
            )}

            {activeSection === 'cross-functional-skills' && (
              <>
                <div className="col-span-full mb-8">
                  <h2 className="text-2xl font-bold tracking-wide" style={{ color: theme.colors.textPrimary }}>
                    Skills
                  </h2>
                </div>
                {portfolioData.skills.map(skill => (
                  <div
                    key={skill.name}
                    className="p-4 rounded-lg"
                    style={{ 
                      backgroundColor: theme.colors.panelBackground,
                      backdropFilter: 'blur(10px)',
                      border: theme.borders.panel
                    }}
                  >
                    <div className="flex justify-between mb-2">
                      <span style={{ color: theme.colors.textPrimary }}>{skill.name}</span>
                      <span style={{ color: theme.colors.textSecondary }}>{skill.level}%</span>
                    </div>
                    <div className="w-full h-2 rounded-full bg-white bg-opacity-5">
                      <div
                        className="h-full rounded-full"
                        style={{ 
                          width: `${skill.level}%`,
                          backgroundColor: theme.colors.accent
                        }}
                      />
                    </div>
                  </div>
                ))}
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

// Update Breadcrumbs component
const Breadcrumbs = ({ activeSection, activeExpertise, setActiveExpertise }) => {
  const getBreadcrumbs = () => {
    const crumbs = [
      { label: 'Home', onClick: () => setActiveExpertise(null) }
    ];

    if (activeSection) {
      crumbs.push({
        label: activeSection === 'education-and-certifications' ? 'Education and Certifications' :
               activeSection === 'industries-and-experiences' ? 'Industries and Experiences' :
               activeSection === 'cross-functional-skills' ? 'Cross-functional Skills' :
               activeSection === 'featured-projects' ? 'Featured Projects' :
               activeSection === 'resume' ? 'Resume' :
               activeSection === 'contact' ? 'Contact' :
               'About',
        onClick: activeExpertise ? () => setActiveExpertise(null) : null
      });
    }

    if (activeExpertise) {
      const expertise = EXPERTISE_AREAS.find(e => e.id === activeExpertise);
      if (expertise) {
        crumbs.push({
          label: expertise.name,
          onClick: null
        });
      }
    }

    return crumbs;
  };

  return (
    <div className="flex items-center space-x-2 mb-6">
      {getBreadcrumbs().map((crumb, index) => (
        <div key={crumb.label} className="flex items-center">
          {index > 0 && (
            <span 
              className="mx-2"
              style={{ color: theme.colors.textSecondary }}
            >
              /
            </span>
          )}
          <span
            className={`${crumb.onClick ? 'cursor-pointer hover:opacity-80' : ''} transition-opacity duration-200`}
            style={{ 
              color: index === getBreadcrumbs().length - 1 
                ? theme.colors.textPrimary 
                : theme.colors.accent
            }}
            onClick={crumb.onClick}
          >
            {crumb.label}
          </span>
        </div>
      ))}
    </div>
  );
};

// Component 52: StarshipControlPanel - Main application component that integrates everything
const StarshipControlPanel = () => {
  return <InteractivePortfolioView />;
};

export default StarshipControlPanel;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/globals.css
================
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        suppressHydrationWarning
      >
        {children}
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
'use client';

import dynamic from 'next/dynamic';

// Use dynamic import with no SSR to avoid hydration issues with complex client components
const ClaudeStarshipControlPanel = dynamic(
  () => import('../../docs/claude-starship-control-panel'),
  { ssr: false }
);

export default function Home() {
  return (
    <div className="min-h-screen bg-black">
      <ClaudeStarshipControlPanel />
    </div>
  );
}

================
File: src/services/openai.js
================
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

export const generateContent = async (prompt, options = {}) => {
  if (!OPENAI_API_KEY) {
    console.warn('OpenAI API key is missing. Using mock data instead.');
    return mockGenerateContent(prompt, options);
  }

  try {
    const response = await fetch('https://api.openai.com/v1/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: options.model || 'gpt-3.5-turbo-instruct',
        prompt,
        max_tokens: options.maxTokens || 300,
        temperature: options.temperature || 0.7,
      }),
    });

    const data = await response.json();
    
    if (data.error) {
      console.error('OpenAI API error:', data.error);
      return mockGenerateContent(prompt, options);
    }
    
    return data.choices[0].text.trim();
  } catch (error) {
    console.error('Failed to generate content with OpenAI:', error);
    return mockGenerateContent(prompt, options);
  }
};

// Mock function implementation...

================
File: src/services/supabase.js
================
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';

if (!supabaseUrl || !supabaseAnonKey) {
  console.warn('Supabase URL or Anon Key is missing. Database functionality will be limited.');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

================
File: src/stories/assets/accessibility.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="none" viewBox="0 0 48 48"><title>Accessibility</title><circle cx="24.334" cy="24" r="24" fill="#A849FF" fill-opacity=".3"/><path fill="#A470D5" fill-rule="evenodd" d="M27.8609 11.585C27.8609 9.59506 26.2497 7.99023 24.2519 7.99023C22.254 7.99023 20.6429 9.65925 20.6429 11.585C20.6429 13.575 22.254 15.1799 24.2519 15.1799C26.2497 15.1799 27.8609 13.575 27.8609 11.585ZM21.8922 22.6473C21.8467 23.9096 21.7901 25.4788 21.5897 26.2771C20.9853 29.0462 17.7348 36.3314 17.3325 37.2275C17.1891 37.4923 17.1077 37.7955 17.1077 38.1178C17.1077 39.1519 17.946 39.9902 18.9802 39.9902C19.6587 39.9902 20.253 39.6293 20.5814 39.0889L20.6429 38.9874L24.2841 31.22C24.2841 31.22 27.5529 37.9214 27.9238 38.6591C28.2948 39.3967 28.8709 39.9902 29.7168 39.9902C30.751 39.9902 31.5893 39.1519 31.5893 38.1178C31.5893 37.7951 31.3639 37.2265 31.3639 37.2265C30.9581 36.3258 27.698 29.0452 27.0938 26.2771C26.8975 25.4948 26.847 23.9722 26.8056 22.7236C26.7927 22.333 26.7806 21.9693 26.7653 21.6634C26.7008 21.214 27.0231 20.8289 27.4097 20.7005L35.3366 18.3253C36.3033 18.0685 36.8834 16.9773 36.6256 16.0144C36.3678 15.0515 35.2722 14.4737 34.3055 14.7305C34.3055 14.7305 26.8619 17.1057 24.2841 17.1057C21.7062 17.1057 14.456 14.7947 14.456 14.7947C13.4893 14.5379 12.3937 14.9873 12.0715 15.9502C11.7493 16.9131 12.3293 18.0044 13.3604 18.3253L21.2873 20.7005C21.674 20.8289 21.9318 21.214 21.9318 21.6634C21.9174 21.9493 21.9053 22.2857 21.8922 22.6473Z" clip-rule="evenodd"/></svg>

================
File: src/stories/assets/discord.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="33" height="32" fill="none" viewBox="0 0 33 32"><g clip-path="url(#clip0_10031_177575)"><mask id="mask0_10031_177575" style="mask-type:luminance" width="33" height="25" x="0" y="4" maskUnits="userSpaceOnUse"><path fill="#fff" d="M32.5034 4.00195H0.503906V28.7758H32.5034V4.00195Z"/></mask><g mask="url(#mask0_10031_177575)"><path fill="#5865F2" d="M27.5928 6.20817C25.5533 5.27289 23.3662 4.58382 21.0794 4.18916C21.0378 4.18154 20.9962 4.20057 20.9747 4.23864C20.6935 4.73863 20.3819 5.3909 20.1637 5.90358C17.7042 5.53558 15.2573 5.53558 12.8481 5.90358C12.6299 5.37951 12.307 4.73863 12.0245 4.23864C12.003 4.20184 11.9614 4.18281 11.9198 4.18916C9.63431 4.58255 7.44721 5.27163 5.40641 6.20817C5.38874 6.21578 5.3736 6.22848 5.36355 6.24497C1.21508 12.439 0.078646 18.4809 0.636144 24.4478C0.638667 24.477 0.655064 24.5049 0.677768 24.5227C3.41481 26.5315 6.06609 27.7511 8.66815 28.5594C8.70979 28.5721 8.75392 28.5569 8.78042 28.5226C9.39594 27.6826 9.94461 26.7968 10.4151 25.8653C10.4428 25.8107 10.4163 25.746 10.3596 25.7244C9.48927 25.3945 8.66058 24.9922 7.86343 24.5354C7.80038 24.4986 7.79533 24.4084 7.85333 24.3653C8.02108 24.2397 8.18888 24.109 8.34906 23.977C8.37804 23.9529 8.41842 23.9478 8.45249 23.963C13.6894 26.3526 19.359 26.3526 24.5341 23.963C24.5682 23.9465 24.6086 23.9516 24.6388 23.9757C24.799 24.1077 24.9668 24.2397 25.1358 24.3653C25.1938 24.4084 25.19 24.4986 25.127 24.5354C24.3298 25.0011 23.5011 25.3945 22.6296 25.7232C22.5728 25.7447 22.5476 25.8107 22.5754 25.8653C23.0559 26.7955 23.6046 27.6812 24.2087 28.5213C24.234 28.5569 24.2794 28.5721 24.321 28.5594C26.9357 27.7511 29.5869 26.5315 32.324 24.5227C32.348 24.5049 32.3631 24.4783 32.3656 24.4491C33.0328 17.5506 31.2481 11.5584 27.6344 6.24623C27.6256 6.22848 27.6105 6.21578 27.5928 6.20817ZM11.1971 20.8146C9.62043 20.8146 8.32129 19.3679 8.32129 17.5913C8.32129 15.8146 9.59523 14.368 11.1971 14.368C12.8115 14.368 14.0981 15.8273 14.0729 17.5913C14.0729 19.3679 12.7989 20.8146 11.1971 20.8146ZM21.8299 20.8146C20.2533 20.8146 18.9541 19.3679 18.9541 17.5913C18.9541 15.8146 20.228 14.368 21.8299 14.368C23.4444 14.368 24.7309 15.8273 24.7057 17.5913C24.7057 19.3679 23.4444 20.8146 21.8299 20.8146Z"/></g></g><defs><clipPath id="clip0_10031_177575"><rect width="32" height="32" fill="#fff" transform="translate(0.5)"/></clipPath></defs></svg>

================
File: src/stories/assets/github.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="none" viewBox="0 0 32 32"><path fill="#161614" d="M16.0001 0C7.16466 0 0 7.17472 0 16.0256C0 23.1061 4.58452 29.1131 10.9419 31.2322C11.7415 31.3805 12.0351 30.8845 12.0351 30.4613C12.0351 30.0791 12.0202 28.8167 12.0133 27.4776C7.56209 28.447 6.62283 25.5868 6.62283 25.5868C5.89499 23.7345 4.8463 23.2419 4.8463 23.2419C3.39461 22.2473 4.95573 22.2678 4.95573 22.2678C6.56242 22.3808 7.40842 23.9192 7.40842 23.9192C8.83547 26.3691 11.1514 25.6609 12.0645 25.2514C12.2081 24.2156 12.6227 23.5087 13.0803 23.1085C9.52648 22.7032 5.7906 21.3291 5.7906 15.1886C5.7906 13.4389 6.41563 12.0094 7.43916 10.8871C7.27303 10.4834 6.72537 8.85349 7.59415 6.64609C7.59415 6.64609 8.93774 6.21539 11.9953 8.28877C13.2716 7.9337 14.6404 7.75563 16.0001 7.74953C17.3599 7.75563 18.7297 7.9337 20.0084 8.28877C23.0623 6.21539 24.404 6.64609 24.404 6.64609C25.2749 8.85349 24.727 10.4834 24.5608 10.8871C25.5868 12.0094 26.2075 13.4389 26.2075 15.1886C26.2075 21.3437 22.4645 22.699 18.9017 23.0957C19.4756 23.593 19.9869 24.5683 19.9869 26.0634C19.9869 28.2077 19.9684 29.9334 19.9684 30.4613C19.9684 30.8877 20.2564 31.3874 21.0674 31.2301C27.4213 29.1086 32 23.1037 32 16.0256C32 7.17472 24.8364 0 16.0001 0ZM5.99257 22.8288C5.95733 22.9084 5.83227 22.9322 5.71834 22.8776C5.60229 22.8253 5.53711 22.7168 5.57474 22.6369C5.60918 22.5549 5.7345 22.5321 5.85029 22.587C5.9666 22.6393 6.03284 22.7489 5.99257 22.8288ZM6.7796 23.5321C6.70329 23.603 6.55412 23.5701 6.45291 23.4581C6.34825 23.3464 6.32864 23.197 6.40601 23.125C6.4847 23.0542 6.62937 23.0874 6.73429 23.1991C6.83895 23.3121 6.85935 23.4605 6.7796 23.5321ZM7.31953 24.4321C7.2215 24.5003 7.0612 24.4363 6.96211 24.2938C6.86407 24.1513 6.86407 23.9804 6.96422 23.9119C7.06358 23.8435 7.2215 23.905 7.32191 24.0465C7.41968 24.1914 7.41968 24.3623 7.31953 24.4321ZM8.23267 25.4743C8.14497 25.5712 7.95818 25.5452 7.82146 25.413C7.68156 25.2838 7.64261 25.1004 7.73058 25.0035C7.81934 24.9064 8.00719 24.9337 8.14497 25.0648C8.28381 25.1938 8.3262 25.3785 8.23267 25.4743ZM9.41281 25.8262C9.37413 25.9517 9.19423 26.0088 9.013 25.9554C8.83203 25.9005 8.7136 25.7535 8.75016 25.6266C8.78778 25.5003 8.96848 25.4408 9.15104 25.4979C9.33174 25.5526 9.45044 25.6985 9.41281 25.8262ZM10.7559 25.9754C10.7604 26.1076 10.6067 26.2172 10.4165 26.2196C10.2252 26.2238 10.0704 26.1169 10.0683 25.9868C10.0683 25.8534 10.2185 25.7448 10.4098 25.7416C10.6001 25.7379 10.7559 25.8441 10.7559 25.9754ZM12.0753 25.9248C12.0981 26.0537 11.9658 26.1862 11.7769 26.2215C11.5912 26.2554 11.4192 26.1758 11.3957 26.0479C11.3726 25.9157 11.5072 25.7833 11.6927 25.7491C11.8819 25.7162 12.0512 25.7937 12.0753 25.9248Z"/></svg>

================
File: src/stories/assets/tutorials.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="33" height="32" fill="none" viewBox="0 0 33 32"><g clip-path="url(#clip0_10031_177597)"><path fill="#B7F0EF" fill-rule="evenodd" d="M17 7.87059C17 6.48214 17.9812 5.28722 19.3431 5.01709L29.5249 2.99755C31.3238 2.64076 33 4.01717 33 5.85105V22.1344C33 23.5229 32.0188 24.7178 30.6569 24.9879L20.4751 27.0074C18.6762 27.3642 17 25.9878 17 24.1539L17 7.87059Z" clip-rule="evenodd" opacity=".7"/><path fill="#87E6E5" fill-rule="evenodd" d="M1 5.85245C1 4.01857 2.67623 2.64215 4.47507 2.99895L14.6569 5.01848C16.0188 5.28861 17 6.48354 17 7.87198V24.1553C17 25.9892 15.3238 27.3656 13.5249 27.0088L3.34311 24.9893C1.98119 24.7192 1 23.5242 1 22.1358V5.85245Z" clip-rule="evenodd"/><path fill="#61C1FD" fill-rule="evenodd" d="M15.543 5.71289C15.543 5.71289 16.8157 5.96289 17.4002 6.57653C17.9847 7.19016 18.4521 9.03107 18.4521 9.03107C18.4521 9.03107 18.4521 25.1106 18.4521 26.9629C18.4521 28.8152 19.3775 31.4174 19.3775 31.4174L17.4002 28.8947L16.2575 31.4174C16.2575 31.4174 15.543 29.0765 15.543 27.122C15.543 25.1674 15.543 5.71289 15.543 5.71289Z" clip-rule="evenodd"/></g><defs><clipPath id="clip0_10031_177597"><rect width="32" height="32" fill="#fff" transform="translate(0.5)"/></clipPath></defs></svg>

================
File: src/stories/assets/youtube.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="none" viewBox="0 0 32 32"><path fill="#ED1D24" d="M31.3313 8.44657C30.9633 7.08998 29.8791 6.02172 28.5022 5.65916C26.0067 5.00026 16 5.00026 16 5.00026C16 5.00026 5.99333 5.00026 3.4978 5.65916C2.12102 6.02172 1.03665 7.08998 0.668678 8.44657C0 10.9053 0 16.0353 0 16.0353C0 16.0353 0 21.1652 0.668678 23.6242C1.03665 24.9806 2.12102 26.0489 3.4978 26.4116C5.99333 27.0703 16 27.0703 16 27.0703C16 27.0703 26.0067 27.0703 28.5022 26.4116C29.8791 26.0489 30.9633 24.9806 31.3313 23.6242C32 21.1652 32 16.0353 32 16.0353C32 16.0353 32 10.9053 31.3313 8.44657Z"/><path fill="#fff" d="M12.7266 20.6934L21.0902 16.036L12.7266 11.3781V20.6934Z"/></svg>

================
File: src/stories/button.css
================
.storybook-button {
  display: inline-block;
  cursor: pointer;
  border: 0;
  border-radius: 3em;
  font-weight: 700;
  line-height: 1;
  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}
.storybook-button--primary {
  background-color: #555ab9;
  color: white;
}
.storybook-button--secondary {
  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;
  background-color: transparent;
  color: #333;
}
.storybook-button--small {
  padding: 10px 16px;
  font-size: 12px;
}
.storybook-button--medium {
  padding: 11px 20px;
  font-size: 14px;
}
.storybook-button--large {
  padding: 12px 24px;
  font-size: 16px;
}

================
File: src/stories/Button.stories.ts
================
import type { Meta, StoryObj } from '@storybook/react';
import { fn } from '@storybook/test';

import { Button } from './Button';

// More on how to set up stories at: https://storybook.js.org/docs/writing-stories#default-export
const meta = {
  title: 'Example/Button',
  component: Button,
  parameters: {
    // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/configure/story-layout
    layout: 'centered',
  },
  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs
  tags: ['autodocs'],
  // More on argTypes: https://storybook.js.org/docs/api/argtypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args
  args: { onClick: fn() },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

// More on writing stories with args: https://storybook.js.org/docs/writing-stories/args
export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    label: 'Button',
  },
};

export const Large: Story = {
  args: {
    size: 'large',
    label: 'Button',
  },
};

export const Small: Story = {
  args: {
    size: 'small',
    label: 'Button',
  },
};

================
File: src/stories/Button.tsx
================
import React from 'react';

import './button.css';

export interface ButtonProps {
  /** Is this the principal call to action on the page? */
  primary?: boolean;
  /** What background color to use */
  backgroundColor?: string;
  /** How large should the button be? */
  size?: 'small' | 'medium' | 'large';
  /** Button contents */
  label: string;
  /** Optional click handler */
  onClick?: () => void;
}

/** Primary UI component for user interaction */
export const Button = ({
  primary = false,
  size = 'medium',
  backgroundColor,
  label,
  ...props
}: ButtonProps) => {
  const mode = primary ? 'storybook-button--primary' : 'storybook-button--secondary';
  return (
    <button
      type="button"
      className={['storybook-button', `storybook-button--${size}`, mode].join(' ')}
      {...props}
    >
      {label}
      <style jsx>{`
        button {
          background-color: ${backgroundColor};
        }
      `}</style>
    </button>
  );
};

================
File: src/stories/Configure.mdx
================
import { Meta } from "@storybook/blocks";
import Image from "next/image";

import Github from "./assets/github.svg";
import Discord from "./assets/discord.svg";
import Youtube from "./assets/youtube.svg";
import Tutorials from "./assets/tutorials.svg";
import Styling from "./assets/styling.png";
import Context from "./assets/context.png";
import Assets from "./assets/assets.png";
import Docs from "./assets/docs.png";
import Share from "./assets/share.png";
import FigmaPlugin from "./assets/figma-plugin.png";
import Testing from "./assets/testing.png";
import Accessibility from "./assets/accessibility.png";
import Theming from "./assets/theming.png";
import AddonLibrary from "./assets/addon-library.png";

export const RightArrow = () => <svg 
    viewBox="0 0 14 14" 
    width="8px" 
    height="14px" 
    style={{ 
      marginLeft: '4px',
      display: 'inline-block',
      shapeRendering: 'inherit',
      verticalAlign: 'middle',
      fill: 'currentColor',
      'path fill': 'currentColor'
    }}
>
  <path d="m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z" />
</svg>

<Meta title="Configure your project" />

<div className="sb-container">
  <div className='sb-section-title'>
    # Configure your project

    Because Storybook works separately from your app, you'll need to configure it for your specific stack and setup. Below, explore guides for configuring Storybook with popular frameworks and tools. If you get stuck, learn how you can ask for help from our community.
  </div>
  <div className="sb-section">
    <div className="sb-section-item">
      <Image
        src={Styling}
        alt="A wall of logos representing different styling technologies"
        width={0}
        height={0}
        style={{ width: '100%', height: 'auto' }}
      />
      <h4 className="sb-section-item-heading">Add styling and CSS</h4>
      <p className="sb-section-item-paragraph">Like with web applications, there are many ways to include CSS within Storybook. Learn more about setting up styling within Storybook.</p>
      <a
        href="https://storybook.js.org/docs/configure/styling-and-css/?renderer=react"
        target="_blank"
      >Learn more<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <Image 
        width={0}
        height={0}
        style={{ width: '100%', height: 'auto' }}
        src={Context}
        alt="An abstraction representing the composition of data for a component"
      />
      <h4 className="sb-section-item-heading">Provide context and mocking</h4>
      <p className="sb-section-item-paragraph">Often when a story doesn't render, it's because your component is expecting a specific environment or context (like a theme provider) to be available.</p>
      <a
        href="https://storybook.js.org/docs/writing-stories/decorators/?renderer=react#context-for-mocking"
        target="_blank"
      >Learn more<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <Image 
        width={0}
        height={0}
        style={{ width: '100%', height: 'auto' }} 
        src={Assets} 
        alt="A representation of typography and image assets" 
      />
      <div>
        <h4 className="sb-section-item-heading">Load assets and resources</h4>
        <p className="sb-section-item-paragraph">To link static files (like fonts) to your projects and stories, use the
        `staticDirs` configuration option to specify folders to load when
        starting Storybook.</p>
        <a
          href="https://storybook.js.org/docs/configure/images-and-assets/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
    </div>
  </div>
</div>
<div className="sb-container">
  <div className='sb-section-title'>
    # Do more with Storybook

    Now that you know the basics, let's explore other parts of Storybook that will improve your experience. This list is just to get you started. You can customise Storybook in many ways to fit your needs.
  </div>

  <div className="sb-section">
    <div className="sb-features-grid">
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Docs} 
          alt="A screenshot showing the autodocs tag being set, pointing a docs page being generated" 
        />
        <h4 className="sb-section-item-heading">Autodocs</h4>
        <p className="sb-section-item-paragraph">Auto-generate living,
          interactive reference documentation from your components and stories.</p>
        <a
          href="https://storybook.js.org/docs/writing-docs/autodocs/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Share} 
          alt="A browser window showing a Storybook being published to a chromatic.com URL" 
        />
        <h4 className="sb-section-item-heading">Publish to Chromatic</h4>
        <p className="sb-section-item-paragraph">Publish your Storybook to review and collaborate with your entire team.</p>
        <a
          href="https://storybook.js.org/docs/sharing/publish-storybook/?renderer=react#publish-storybook-with-chromatic"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={FigmaPlugin} 
          alt="Windows showing the Storybook plugin in Figma" 
        />
        <h4 className="sb-section-item-heading">Figma Plugin</h4>
        <p className="sb-section-item-paragraph">Embed your stories into Figma to cross-reference the design and live
          implementation in one place.</p>
        <a
          href="https://storybook.js.org/docs/sharing/design-integrations/?renderer=react#embed-storybook-in-figma-with-the-plugin"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Testing} 
          alt="Screenshot of tests passing and failing" 
        />
        <h4 className="sb-section-item-heading">Testing</h4>
        <p className="sb-section-item-paragraph">Use stories to test a component in all its variations, no matter how
          complex.</p>
        <a
          href="https://storybook.js.org/docs/writing-tests/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Accessibility} 
          alt="Screenshot of accessibility tests passing and failing" 
        />
        <h4 className="sb-section-item-heading">Accessibility</h4>
        <p className="sb-section-item-paragraph">Automatically test your components for a11y issues as you develop.</p>
        <a
          href="https://storybook.js.org/docs/writing-tests/accessibility-testing/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Theming} 
          alt="Screenshot of Storybook in light and dark mode" 
        />
        <h4 className="sb-section-item-heading">Theming</h4>
        <p className="sb-section-item-paragraph">Theme Storybook's UI to personalize it to your project.</p>
        <a
          href="https://storybook.js.org/docs/configure/theming/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
    </div>
  </div>
</div>
<div className='sb-addon'>
  <div className='sb-addon-text'>
    <h4>Addons</h4>
    <p className="sb-section-item-paragraph">Integrate your tools with Storybook to connect workflows.</p>
    <a
        href="https://storybook.js.org/addons/"
        target="_blank"
      >Discover all addons<RightArrow /></a>
  </div>
  <div className='sb-addon-img'>
    <Image 
      width={650}
      height={347}
      src={AddonLibrary} 
      alt="Integrate your tools with Storybook to connect workflows." 
    />
  </div>
</div>

<div className="sb-section sb-socials">
    <div className="sb-section-item">
      <Image 
        width={32}
        height={32}
        layout="fixed"
        src={Github} 
        alt="Github logo" 
        className="sb-explore-image"
      />
      Join our contributors building the future of UI development.

      <a
        href="https://github.com/storybookjs/storybook"
        target="_blank"
      >Star on GitHub<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <Image 
        width={33}
        height={32}
        layout="fixed"
        src={Discord} 
        alt="Discord logo" 
        className="sb-explore-image"
      />
      <div>
        Get support and chat with frontend developers.

        <a
          href="https://discord.gg/storybook"
          target="_blank"
        >Join Discord server<RightArrow /></a>
      </div>
    </div>
    <div className="sb-section-item">
      <Image 
        width={32}
        height={32}
        layout="fixed"
        src={Youtube} 
        alt="Youtube logo" 
        className="sb-explore-image"
      />
      <div>
        Watch tutorials, feature previews and interviews.

        <a
          href="https://www.youtube.com/@chromaticui"
          target="_blank"
        >Watch on YouTube<RightArrow /></a>
      </div>
    </div>
    <div className="sb-section-item">
      <Image 
        width={33}
        height={32}
        layout="fixed"
        src={Tutorials} 
        alt="A book" 
        className="sb-explore-image"
      />
      <p>Follow guided walkthroughs on for key workflows.</p>

      <a
          href="https://storybook.js.org/tutorials/"
          target="_blank"
        >Discover tutorials<RightArrow /></a>
    </div>
</div>

<style>
  {`
  .sb-container {
    margin-bottom: 48px;
  }

  .sb-section {
    width: 100%;
    display: flex;
    flex-direction: row;
    gap: 20px;
  }

  img {
    object-fit: cover;
  }

  .sb-section-title {
    margin-bottom: 32px;
  }

  .sb-section a:not(h1 a, h2 a, h3 a) {
    font-size: 14px;
  }

  .sb-section-item, .sb-grid-item {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .sb-section-item-heading {
    padding-top: 20px !important;
    padding-bottom: 5px !important;
    margin: 0 !important;
  }
  .sb-section-item-paragraph {
    margin: 0;
    padding-bottom: 10px;
  }

  .sb-chevron {
    margin-left: 5px;
  }

  .sb-features-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 32px 20px;
  }

  .sb-socials {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
  }

  .sb-socials p {
    margin-bottom: 10px;
  }

  .sb-explore-image {
    max-height: 32px;
    align-self: flex-start;
  }

  .sb-addon {
    width: 100%;
    display: flex;
    align-items: center;
    position: relative;
    background-color: #EEF3F8;
    border-radius: 5px;
    border: 1px solid rgba(0, 0, 0, 0.05);
    background: #EEF3F8;
    height: 180px;
    margin-bottom: 48px;
    overflow: hidden;
  }

  .sb-addon-text {
    padding-left: 48px;
    max-width: 240px;
  }

  .sb-addon-text h4 {
    padding-top: 0px;
  }

  .sb-addon-img {
    position: absolute;
    left: 345px;
    top: 0;
    height: 100%;
    width: 200%;
    overflow: hidden;
  }

  .sb-addon-img img {
    width: 650px;
    transform: rotate(-15deg);
    margin-left: 40px;
    margin-top: -72px;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0);
    backface-visibility: hidden;
  }

  @media screen and (max-width: 800px) {
    .sb-addon-img {
      left: 300px;
    }
  }

  @media screen and (max-width: 600px) {
    .sb-section {
      flex-direction: column;
    }

    .sb-features-grid {
      grid-template-columns: repeat(1, 1fr);
    }

    .sb-socials {
      grid-template-columns: repeat(2, 1fr);
    }

    .sb-addon {
      height: 280px;
      align-items: flex-start;
      padding-top: 32px;
      overflow: hidden;
    }

    .sb-addon-text {
      padding-left: 24px;
    }

    .sb-addon-img {
      right: 0;
      left: 0;
      top: 130px;
      bottom: 0;
      overflow: hidden;
      height: auto;
      width: 124%;
    }

    .sb-addon-img img {
      width: 1200px;
      transform: rotate(-12deg);
      margin-left: 0;
      margin-top: 48px;
      margin-bottom: -40px;
      margin-left: -24px;
    }
  }
  `}
</style>

================
File: src/stories/header.css
================
.storybook-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  padding: 15px 20px;
  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}

.storybook-header svg {
  display: inline-block;
  vertical-align: top;
}

.storybook-header h1 {
  display: inline-block;
  vertical-align: top;
  margin: 6px 0 6px 10px;
  font-weight: 700;
  font-size: 20px;
  line-height: 1;
}

.storybook-header button + button {
  margin-left: 10px;
}

.storybook-header .welcome {
  margin-right: 10px;
  color: #333;
  font-size: 14px;
}

================
File: src/stories/Header.stories.ts
================
import type { Meta, StoryObj } from '@storybook/react';
import { fn } from '@storybook/test';

import { Header } from './Header';

const meta = {
  title: 'Example/Header',
  component: Header,
  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs
  tags: ['autodocs'],
  parameters: {
    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout
    layout: 'fullscreen',
  },
  args: {
    onLogin: fn(),
    onLogout: fn(),
    onCreateAccount: fn(),
  },
} satisfies Meta<typeof Header>;

export default meta;
type Story = StoryObj<typeof meta>;

export const LoggedIn: Story = {
  args: {
    user: {
      name: 'Jane Doe',
    },
  },
};

export const LoggedOut: Story = {};

================
File: src/stories/Header.tsx
================
import React from 'react';

import { Button } from './Button';
import './header.css';

type User = {
  name: string;
};

export interface HeaderProps {
  user?: User;
  onLogin?: () => void;
  onLogout?: () => void;
  onCreateAccount?: () => void;
}

export const Header = ({ user, onLogin, onLogout, onCreateAccount }: HeaderProps) => (
  <header>
    <div className="storybook-header">
      <div>
        <svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
          <g fill="none" fillRule="evenodd">
            <path
              d="M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z"
              fill="#FFF"
            />
            <path
              d="M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z"
              fill="#555AB9"
            />
            <path
              d="M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z"
              fill="#91BAF8"
            />
          </g>
        </svg>
        <h1>Acme</h1>
      </div>
      <div>
        {user ? (
          <>
            <span className="welcome">
              Welcome, <b>{user.name}</b>!
            </span>
            <Button size="small" onClick={onLogout} label="Log out" />
          </>
        ) : (
          <>
            <Button size="small" onClick={onLogin} label="Log in" />
            <Button primary size="small" onClick={onCreateAccount} label="Sign up" />
          </>
        )}
      </div>
    </div>
  </header>
);

================
File: src/stories/page.css
================
.storybook-page {
  margin: 0 auto;
  padding: 48px 20px;
  max-width: 600px;
  color: #333;
  font-size: 14px;
  line-height: 24px;
  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}

.storybook-page h2 {
  display: inline-block;
  vertical-align: top;
  margin: 0 0 4px;
  font-weight: 700;
  font-size: 32px;
  line-height: 1;
}

.storybook-page p {
  margin: 1em 0;
}

.storybook-page a {
  color: inherit;
}

.storybook-page ul {
  margin: 1em 0;
  padding-left: 30px;
}

.storybook-page li {
  margin-bottom: 8px;
}

.storybook-page .tip {
  display: inline-block;
  vertical-align: top;
  margin-right: 10px;
  border-radius: 1em;
  background: #e7fdd8;
  padding: 4px 12px;
  color: #357a14;
  font-weight: 700;
  font-size: 11px;
  line-height: 12px;
}

.storybook-page .tip-wrapper {
  margin-top: 40px;
  margin-bottom: 40px;
  font-size: 13px;
  line-height: 20px;
}

.storybook-page .tip-wrapper svg {
  display: inline-block;
  vertical-align: top;
  margin-top: 3px;
  margin-right: 4px;
  width: 12px;
  height: 12px;
}

.storybook-page .tip-wrapper svg path {
  fill: #1ea7fd;
}

================
File: src/stories/Page.stories.ts
================
import type { Meta, StoryObj } from '@storybook/react';
import { expect, userEvent, within } from '@storybook/test';

import { Page } from './Page';

const meta = {
  title: 'Example/Page',
  component: Page,
  parameters: {
    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout
    layout: 'fullscreen',
  },
} satisfies Meta<typeof Page>;

export default meta;
type Story = StoryObj<typeof meta>;

export const LoggedOut: Story = {};

// More on component testing: https://storybook.js.org/docs/writing-tests/component-testing
export const LoggedIn: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const loginButton = canvas.getByRole('button', { name: /Log in/i });
    await expect(loginButton).toBeInTheDocument();
    await userEvent.click(loginButton);
    await expect(loginButton).not.toBeInTheDocument();

    const logoutButton = canvas.getByRole('button', { name: /Log out/i });
    await expect(logoutButton).toBeInTheDocument();
  },
};

================
File: src/stories/Page.tsx
================
import React from 'react';

import { Header } from './Header';
import './page.css';

type User = {
  name: string;
};

export const Page: React.FC = () => {
  const [user, setUser] = React.useState<User>();

  return (
    <article>
      <Header
        user={user}
        onLogin={() => setUser({ name: 'Jane Doe' })}
        onLogout={() => setUser(undefined)}
        onCreateAccount={() => setUser({ name: 'Jane Doe' })}
      />

      <section className="storybook-page">
        <h2>Pages in Storybook</h2>
        <p>
          We recommend building UIs with a{' '}
          <a href="https://componentdriven.org" target="_blank" rel="noopener noreferrer">
            <strong>component-driven</strong>
          </a>{' '}
          process starting with atomic components and ending with pages.
        </p>
        <p>
          <a
            href="https://storybook.js.org/tutorials/"
            target="_blank"
            rel="noopener noreferrer"
            aria-label="Learn more about Storybook tutorials"
          >
            Storybook tutorials
          </a>
          Get a guided tutorial on component-driven development at{' '}
          <a href="https://storybook.js.org/tutorials/" target="_blank" rel="noopener noreferrer">
            Storybook tutorials
          </a>
          . Read more in the{' '}
          <a href="https://storybook.js.org/docs" target="_blank" rel="noopener noreferrer">
            docs
          </a>
          .
        </p>
        <div className="tip-wrapper">
          <span className="tip">Tip</span> Adjust the width of the canvas with the{' '}
          <svg width="10" height="10" viewBox="0 0 12 12" xmlns="http://www.w3.org/2000/svg">
            <g fill="none" fillRule="evenodd">
              <path
                d="M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z"
                id="a"
                fill="#999"
              />
            </g>
          </svg>
          Viewports addon in the toolbar
        </div>
      </section>
    </article>
  );
};

================
File: src/utils/errorLogger.js
================
export const logError = (error, context = '') => {
  console.error(`[${context}] Error:`, error);
  
  if (process.env.NODE_ENV === 'production') {
    // Example: Send to error tracking service
    // errorTrackingService.captureException(error, { context });
  }
};

export const handleApiError = (error, fallbackMessage = 'An unexpected error occurred') => {
  logError(error, 'API');
  return {
    error: true,
    message: error.message || fallbackMessage,
    status: error.status || 500
  };
};

export const errorBoundary = (fn) => async (...args) => {
  try {
    return await fn(...args);
  } catch (error) {
    logError(error, fn.name);
    return null;
  }
};

================
File: src/App.jsx
================
// src/App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { CMSProvider } from './context/CMSContext';
import Home from './pages/Home';
import ProjectDetail from './pages/ProjectDetail';
import Admin from './pages/Admin';

function App() {
  return (
    <CMSProvider>
      <Router>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/project/:projectId" element={<ProjectDetail />} />
          <Route path="/admin" element={<Admin />} />
        </Routes>
      </Router>
    </CMSProvider>
  );
}

export default App;

================
File: talking-canvas-portfolio/ChatLogHistory.tsx
================
interface ChatEntry {
  user: string;
  bot: string;
}

interface ChatLogHistoryProps {
  chatLog: ChatEntry[];
}

export default function ChatLogHistory({ chatLog = [] }: ChatLogHistoryProps) {
  return (
    <div className="p-4 mt-4 max-w-3xl mx-auto">
      <h2 className="text-lg font-semibold mb-2">Conversation History</h2>
      <div className="bg-gray-100 p-4 rounded space-y-2">
        {chatLog.map((entry, i) => (
          <div key={i}>
            <p><strong>You:</strong> {entry.user}</p>
            <p><strong>AI:</strong> {entry.bot}</p>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: talking-canvas-portfolio/DebugPanel.tsx
================
interface DebugPanelProps {
  debug: string[];
}

export default function DebugPanel({ debug = [] }: DebugPanelProps) {
  return (
    <div className="bg-black text-green-300 text-xs p-2 max-w-4xl mx-auto mt-4 rounded font-mono h-32 overflow-y-auto">
      {debug.map((line, i) => <div key={i}>{line}</div>)}
    </div>
  );
}

================
File: talking-canvas-portfolio/ErrorBoundary.tsx
================
import { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
}

export default class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, info: ErrorInfo) {
    console.error('ErrorBoundary caught an error:', error, info);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div
          role="alert"
          className="p-6 bg-red-100 text-red-700 rounded shadow max-w-xl mx-auto mt-12"
        >
          <h2 className="text-xl font-semibold mb-2">Something went wrong.</h2>
          <pre className="whitespace-pre-wrap text-sm overflow-x-auto">
            {this.state.error?.message}
          </pre>
        </div>
      );
    }

    return this.props.children;
  }
}

================
File: talking-canvas-portfolio/index.tsx
================
export { default as TalkingCanvasForm } from './TalkingCanvasForm';
export { default as ProjectModal } from './ProjectModal';
export { default as MicStatus } from './MicStatus';
export { default as DebugPanel } from './DebugPanel';
export { default as ProjectCards } from './ProjectCards';
export { default as ProjectDeepDive } from './ProjectDeepDive';
export { default as ChatLogHistory } from './ChatLogHistory';

================
File: talking-canvas-portfolio/MicStatus.tsx
================
import { motion } from 'framer-motion';

interface MicStatusProps {
  isListening: boolean;
  onToggle: () => void;
}

export default function MicStatus({ isListening, onToggle }: MicStatusProps) {
  return (
    <div className="text-center mb-2 flex justify-center items-center gap-4">
      <button
        onClick={onToggle}
        className={`px-4 py-2 rounded ${isListening ? 'bg-red-500' : 'bg-green-600'} text-white`}
      >
        {isListening ? 'Stop Listening' : 'Push to Talk'}
      </button>
      <motion.div
        className="w-4 h-4 rounded-full bg-green-500"
        animate={
          isListening
            ? { scale: [1, 1.4, 1], opacity: [1, 0.6, 1] }
            : { scale: 1, opacity: 0.3 }
        }
        transition={{ duration: 1, repeat: Infinity }}
      />
    </div>
  );
}

================
File: talking-canvas-portfolio/ProjectCards.tsx
================
import { motion, AnimatePresence } from 'framer-motion';

interface Project {
  title: string;
  description: string;
  details: string;
}

interface ProjectCardsProps {
  projects: Project[];
  selectedProject: Project | null;
  openProject: (proj: Project) => void;
}

export default function ProjectCards({
  projects = [],
  selectedProject,
  openProject,
}: ProjectCardsProps) {
  return (
    <AnimatePresence>
      {!selectedProject && (
        <motion.div
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
        >
          {projects.map((proj, i) => (
            <motion.div
              key={i}
              layout
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
              onClick={() => openProject(proj)}
            >
              <div className="bg-white shadow p-4 rounded cursor-pointer">
                <h3 className="text-xl font-semibold">{proj.title}</h3>
                <p className="text-gray-500">{proj.description}</p>
              </div>
            </motion.div>
          ))}
        </motion.div>
      )}
    </AnimatePresence>
  );
}

================
File: talking-canvas-portfolio/ProjectDeepDive.tsx
================
import { motion } from 'framer-motion';

interface Project {
  title: string;
  description: string;
  details: string;
}

interface ProjectDeepDiveProps {
  selectedProject: Project | null;
  onClose: () => void;
}

export default function ProjectDeepDive({
  selectedProject,
  onClose,
}: ProjectDeepDiveProps) {
  if (!selectedProject) return null;

  return (
    <motion.div
      className="max-w-2xl mx-auto p-8 bg-gray-100 rounded shadow"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: 20 }}
    >
      <h2 className="text-2xl font-bold mb-2">{selectedProject.title}</h2>
      <p className="text-gray-700 mb-4">{selectedProject.details}</p>
      <button onClick={onClose} className="px-4 py-2 bg-black text-white rounded">
        Back
      </button>
    </motion.div>
  );
}

================
File: talking-canvas-portfolio/ProjectModal.tsx
================
import { useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface Project {
  title: string;
  description: string;
  details: string;
}

interface Props {
  selectedProject: Project | null;
  onClose: () => void;
}

export default function ProjectModal({ selectedProject, onClose }: Props) {
  const modalRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handler = (e: KeyboardEvent) => {
      if (e.key === 'Escape') onClose();
    };
    window.addEventListener('keydown', handler);
    modalRef.current?.focus();
    return () => window.removeEventListener('keydown', handler);
  }, [onClose]);

  if (!selectedProject) return null;

  return (
    <AnimatePresence>
      <motion.div
        role="dialog"
        aria-modal="true"
        aria-labelledby="modal-title"
        className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
      >
        <motion.div
          ref={modalRef}
          tabIndex={-1}
          className="bg-white rounded-lg p-6 shadow-lg max-w-xl w-full"
          initial={{ y: 50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          exit={{ y: 50, opacity: 0 }}
        >
          <h2 id="modal-title" className="text-2xl font-bold mb-2">
            {selectedProject.title}
          </h2>
          <p className="text-gray-700 mb-4">{selectedProject.details}</p>
          <button
            onClick={onClose}
            className="px-4 py-2 bg-black text-white rounded"
            aria-label="Close project modal"
          >
            Close
          </button>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}

================
File: talking-canvas-portfolio/TalkingCanvasApp.tsx
================
import { useEffect, useRef, useState } from 'react';
import { Card, CardContent } from "@/components/ui/card";
import TalkingCanvasForm from "./TalkingCanvasForm";

const mockProjects = [
  { title: "AI Moodboard Generator", description: "Real-time AI-driven inspiration board with voice commands." },
  { title: "3D Dot-to-Project Navigator", description: "Interactive 3D dots reveal project previews with click." },
  { title: "Voice Controlled Code Editor", description: "AI-enhanced editor with natural language coding features." },
];

export default function TalkingCanvas() {
  const [transcript, setTranscript] = useState('');
  const [response, setResponse] = useState('');
  const [projects, setProjects] = useState([]);
  const [source, setSource] = useState('text');
  const canvasRef = useRef(null);
  const audioContextRef = useRef(null);
  const analyserRef = useRef(null);
  const dataArrayRef = useRef(null);

  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) return;

    const recognition = new SpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = false;
    recognition.onresult = (event) => {
      const msg = event.results[event.results.length - 1][0].transcript;
      setTranscript(msg);
      setSource('voice');
    };
    recognition.start();

    return () => recognition.stop();
  }, []);

  const speak = (text) => {
    setResponse(text);
    const synth = window.speechSynthesis;
    const utter = new SpeechSynthesisUtterance(text);
    utter.voice = synth.getVoices()[0];
    synth.speak(utter);
  };

  const handleCommand = (msg) => {
    if (msg.includes("latest work")) {
      setProjects(mockProjects);
      speak("Here is my latest work. Let me walk you through it.");
    } else {
      speak("Sorry, I didn't catch that. Try asking about my work.");
    }
  };

  useEffect(() => {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      console.warn('Microphone access is not supported in this environment.');
      return;
    }

    navigator.mediaDevices.getUserMedia({ audio: true })
      .then((stream) => {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const source = audioContext.createMediaStreamSource(stream);
        const analyser = audioContext.createAnalyser();
        source.connect(analyser);
        analyser.fftSize = 64;
        const dataArray = new Uint8Array(analyser.fftSize);

        audioContextRef.current = audioContext;
        analyserRef.current = analyser;
        dataArrayRef.current = dataArray;

        const ctx = canvasRef.current.getContext('2d');

        const drawWave = () => {
          requestAnimationFrame(drawWave);
          analyser.getByteTimeDomainData(dataArray);
          ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);
          ctx.beginPath();
          ctx.moveTo(0, 100);
          dataArray.forEach((val, i) => {
            const x = (canvasRef.current.width / dataArray.length) * i;
            const y = 100 + (val - 128);
            ctx.lineTo(x, y);
          });
          ctx.stroke();
        };

        drawWave();
      })
      .catch((err) => {
        console.warn('Microphone access denied or unavailable:', err);
      });
  }, []);

  return (
    <div className="relative w-full h-screen bg-white overflow-hidden">
      <canvas ref={canvasRef} width={600} height={200} className="mx-auto my-10" />
      <div className="text-center text-xl text-black mt-2">{transcript}</div>
      <div className="text-center text-md text-gray-600 mt-1">{response}</div>

      <TalkingCanvasForm
        transcript={transcript}
        setTranscript={(text) => {
          setTranscript(text);
          setSource('text');
        }}
        handleCommand={handleCommand}
        source={source}
      />

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-8">
        {projects.map((proj, i) => (
          <Card key={i}>
            <CardContent>
              <h3 className="text-xl font-semibold">{proj.title}</h3>
              <p className="text-gray-500">{proj.description}</p>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

================
File: talking-canvas-portfolio/TalkingCanvasForm.tsx
================
import { useEffect, useRef, useState } from 'react';
import { Card, CardContent } from "@/components/ui/card";
import { motion, AnimatePresence } from 'framer-motion';

export default function TalkingCanvasForm(props) {
  const { transcript = '', setTranscript = () => {}, handleCommand = () => {}, source = 'text' } = props;
  const [confirmation, setConfirmation] = useState('');

  useEffect(() => {
    if (navigator.storage && navigator.storage.persist) {
      navigator.storage.persist().then(persistent => {
        console.log(`Storage will be persistent: ${persistent}`);
      });
    }
  }, []);

  useEffect(() => {
    if (source === 'voice' && transcript.trim()) {
      handleCommand(transcript.toLowerCase());
      setConfirmation('Got it!');
      setTimeout(() => setConfirmation(''), 2000);
    }
  }, [transcript, source, handleCommand]);

  return (
    <form
      onSubmit={(e) => {
        e.preventDefault();
        handleCommand(transcript.toLowerCase());
      }}
      className="text-center mb-4"
    >
      <label htmlFor="voice-command-input" className="block text-gray-700 text-sm font-bold mb-2">
        Type or say a command (e.g., "Show me your latest work")
      </label>
      <input
        type="text"
        id="voice-command-input"
        name="voiceCommand"
        autoComplete="off"
        value={transcript}
        onChange={(e) => setTranscript(e.target.value)}
        placeholder="Try: Show me your latest work"
        className="border border-gray-300 px-4 py-2 w-2/3 max-w-md rounded"
      />
      <button
        type="submit"
        id="voice-submit-button"
        name="submitButton"
        className="ml-2 px-4 py-2 bg-black text-white rounded hover:bg-gray-800"
      >
        Ask
      </button>
      <p className="text-sm text-gray-500 mt-2">
        This canvas responds automatically to voice. Type and press Ask to interact manually.
      </p>
      {confirmation && (
        <p className="text-green-600 text-sm mt-1">{confirmation}</p>
      )}
    </form>
  );
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

*storybook.log

================
File: cleanup.js
================
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Script implementation...

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: fix-issues.js
================
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Script implementation...

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "coreyalejandro-design-engineer-portfolio",
  "version": "0.1.0",
  "private": false,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.49.1",
    "@types/three": "^0.174.0",
    "framer-motion": "^12.4.10",
    "next": "^15.2.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.2.0",
    "three": "^0.174.0"
  },
  "devDependencies": {
    "@chromatic-com/storybook": "^3.2.5",
    "@eslint/eslintrc": "^3",
    "@storybook/addon-essentials": "^8.6.3",
    "@storybook/addon-onboarding": "^8.6.3",
    "@storybook/blocks": "^8.6.3",
    "@storybook/experimental-addon-test": "^8.6.3",
    "@storybook/experimental-nextjs-vite": "^8.6.3",
    "@storybook/react": "^8.6.3",
    "@storybook/test": "^8.6.3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@vitest/browser": "^3.0.7",
    "@vitest/coverage-v8": "^3.0.7",
    "eslint": "^9",
    "eslint-config-next": "15.2.1",
    "eslint-plugin-storybook": "^0.11.3",
    "playwright": "^1.50.1",
    "storybook": "^8.6.3",
    "tailwindcss": "^4",
    "typescript": "^5",
    "vitest": "^3.0.7"
  },
  "eslintConfig": {
    "extends": [
      "plugin:storybook/recommended"
    ]
  }
}

================
File: postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: README.md
================
# Design Engineer Portfolio

A Notion-inspired design engineer portfolio with AI integration.

## Features
- 🎨 Notion-inspired clean, minimalist interface
- 🤖 AI chatbot assistant for visitors
- 🧠 AI-powered content generation tools
- 📁 Project showcase with filtering capability
- 📊 Interactive animations and visualizations
- 📱 Mobile-responsive design
- 🛠️ Easy-to-use CMS for content management

## Getting Started
1. Clone this repository
2. Install dependencies with `npm install`
3. Create a `.env.local` file with your environment variables
4. Run the development server with `npm run dev`
5. Open [http://localhost:3000](http://localhost:3000) in your browser

## License
MIT

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: vitest.config.ts
================
import path from 'node:path';
import { fileURLToPath } from 'node:url';

import { defineConfig } from 'vitest/config';

import { storybookTest } from '@storybook/experimental-addon-test/vitest-plugin';

const dirname =
  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));

// More info at: https://storybook.js.org/docs/writing-tests/test-addon
export default defineConfig({
  test: {
    workspace: [
      {
        extends: true,
        plugins: [
          // The plugin will run tests for the stories defined in your Storybook config
          // See options at: https://storybook.js.org/docs/writing-tests/test-addon#storybooktest
          storybookTest({ configDir: path.join(dirname, '.storybook') }),
        ],
        test: {
          name: 'storybook',
          browser: {
        enabled: true,
        headless: true,
        name: 'chromium',
        provider: 'playwright'
      },
          setupFiles: ['.storybook/vitest.setup.ts'],
        },
      },
    ],
  },
});



================================================================
End of Codebase
================================================================
